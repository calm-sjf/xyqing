海阔视界规则分享，当前分享的是：小程序￥home_rule_v2￥base64://@tvbox云盘推送@eyJsYXN0X2NoYXB0ZXJfcnVsZSI6IiIsInRpdGxlIjoidHZib3jkupHnm5jmjqjpgIEiLCJhdXRob3IiOiJ0ZWUmTXJGbHkm5bCP5qOJ6KKE8J+Mnibpppnpm4Xmg4UiLCJ1cmwiOiJoaWtlcjovL2VtcHR5IyNmeWNsYXNzIiwidmVyc2lvbiI6NywiY29sX3R5cGUiOiJ0ZXh0XzEiLCJjbGFzc19uYW1lIjoi5YWo6YOoJuWWteaQnCblsI/nurjmnaEm5om+6LWE5rqQJuWwj+ermSZVUOS6keaQnCbnm5jln7rlnLDnmbvpmYYm5LqR55uY6LWE5rqQJue9keebmOi1hOa6kCZKSUtFJuabtOWkmibkupHnm5jnm5hURybmh5Lni5dURybkupHnm5jlj5HluINURyZtZW93IiwidHlwZSI6InZpZGVvIiwiY2xhc3NfdXJsIjoiYWxsJmh0dHBzOi8vd3d3LmFsaXBhbnNvdS5jb20maHR0cHM6Ly91LmdpdGNhZmUubmV0LyZodHRwczovL3poYW96aXl1YW4ubWUvc28maHR0cHM6Ly93d3cucGFuNjY2LmNuLyZodHRwczovL3d3dy51cHl1bnNvLmNvbSZodHRwczovL3d3dy5wYW5qZC5jb20vJmh0dHBzOi8veXVucGFuMS5jb20vJmh0dHBzOi8vYWxpd3AuY24vJmh0dHBzOi8vamlrZS5pbmZvL2NhdGVnb3J5LzIv6K6o6K665Yy6P2xhbmc9ZW4tVVMmaHR0cHM6Ly9kYWxhby5ydS93LyZodHRwczovL3R4Lm1lL3MvWXVuUGFuUGFuJmh0dHBzOi8vdHgubWUvcy92aXAxMTVob3QmaHR0cHM6Ly90eC5tZS9zL3NoYXJlQWxpeXVuJmh0dHBzOi8vbWVvdy50ZyIsImFyZWFfbmFtZSI6IiIsImFyZWFfdXJsIjoiIiwic29ydF9uYW1lIjoiIiwieWVhcl9uYW1lIjoiIiwic29ydF91cmwiOiIiLCJ5ZWFyX3VybCI6IiIsImZpbmRfcnVsZSI6ImpzOlxuXG5sZXQgcmFuZG9tID0gMTtcblxubGV0IHdoaXRlID0gW1xuICAgIFwiLy90eC5tZS9cIixcbl1cbmxldCBkID0gW107XG5cbmxldCB1ID0gTVlfVVJMLnNwbGl0KFwiIyNcIilbMV07XG5cbmZ1bmN0aW9uIGxvYWRVcmwodSkge1xuICAgIGxldCBkZXNjID0gXCJhdXRvXCI7XG4gICAgZm9yIChsZXQgaXQgb2Ygd2hpdGUpIHtcbiAgICAgICAgaWYgKHUuaW5jbHVkZXMoaXQpKSB7XG4gICAgICAgICAgICBkZXNjID0gXCIxMDAlJiZmbG9hdFwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChnZXRBcHBWZXJzaW9uKCkgPj0gMzAxOCkge1xuICAgICAgICBkZXNjID0gXCJmbG9hdCYmdG9wXCI7XG4gICAgfVxuICAgIHNldFJlc3VsdChbe1xuICAgICAgICBjb2xfdHlwZTogXCJ4NV93ZWJ2aWV3X3NpbmdsZVwiLFxuICAgICAgICB1cmw6IHUsXG4gICAgICAgIGRlc2M6IGRlc2MsXG4gICAgICAgIGV4dHJhOiB7XG4gICAgICAgICAgICBjYW5CYWNrOiB0cnVlLFxuICAgICAgICAgICAgdXJsSW50ZXJjZXB0b3I6ICQudG9TdHJpbmcoKG15cnVsZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdGFydHNXaXRoKCdodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vcy8nKSB8fCBpbnB1dC5zdGFydHNXaXRoKCdtYWduZXQ6JykpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9mYmEuZmV0Y2goaW5wdXQsIHt9KTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJNeVZhcignbmFtZScpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJC50b1N0cmluZygodXJsLCBteXJ1bGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZiYS5vcGVuKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlOiBteXJ1bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9wYWdlL3B1c2g/cnVsZT0nICsgbXlydWxlICsgJyZ1cmw9aGlrZXI6Ly9lbXB0eSMjJyArIGVuY29kZVVSSUNvbXBvbmVudCh1cmwpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGlucHV0LCBteXJ1bGUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgTVlfUlVMRS50aXRsZSksXG4gICAgICAgICAgICB1YTogTU9CSUxFX1VBXG4gICAgICAgIH1cbiAgICB9XSlcbn1cbmlmICh1ID09IFwiYWxsXCIpIHtcbiAgICBsZXQgY2xzID0gZ2V0TXlWYXIoXCJjbHNcIiwgXCJcIik7XG4gICAgaWYgKGNscykge1xuICAgICAgICB1ID0gY2xzO1xuICAgICAgICBsb2FkVXJsKHUpO1xuICAgICAgICBjbGVhck15VmFyKFwiY2xzXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCByID0gSlNPTi5wYXJzZShmZXRjaChcImhpa2VyOi8vaG9tZUBcIiArIE1ZX1JVTEUudGl0bGUpKTtcbiAgICAgICAgbGV0IGNuID0gci5jbGFzc19uYW1lLnNwbGl0KFwiJlwiKTtcbiAgICAgICAgbGV0IGN1ID0gci5jbGFzc191cmwuc3BsaXQoXCImXCIpO1xuICAgICAgICBsZXQgYXJyID0gW107XG4gICAgICAgIGFyci5wdXNoKHtcbiAgICAgICAgICAgIHRpdGxlOiBcIuaOqOmAgVwiLFxuICAgICAgICAgICAgdXJsOiAkLnRvU3RyaW5nKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjbGVhck15VmFyKCduYW1lJyk7XG4gICAgICAgICAgICAgICAgdmFyIGxpbmsgPSAnaGlrZXI6Ly9wYWdlL3B1c2g/dXJsPWhpa2VyOi8vZW1wdHkjIycgKyBlbmNvZGVVUklDb21wb25lbnQoaW5wdXQucmVwbGFjZShcIiNpc011c2ljPXRydWUjXCIsICcnKS5yZXBsYWNlKCcjaXNWaWRlbz10cnVlIycsICcnKSk7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LnN0YXJ0c1dpdGgoJ2h0dHAnKSB8fCBpbnB1dC5zdGFydHNXaXRoKCdtYWduZXQ6JykgfHwgaW5wdXQuaW5jbHVkZXMoXCJcXG5cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxpbms7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dC5zdGFydHNXaXRoKFwie1wiKSAmJiBpbnB1dC5lbmRzV2l0aChcIn1cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxpbms7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgvXFwudG9ycmVudHxlZDJrXFw6Ly50ZXN0KGlucHV0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5LiN5pSv5oyB5o6o6YCB6L+Z56eN6ZO+5o6l44CCJ1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/or7fovpPlhaXmraPnoa7nmoTpk77mjqXjgIInXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBleHRyYToge1xuICAgICAgICAgICAgICAgIHRpdGxlVmlzaWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnaW5wdXQnXG4gICAgICAgIH0pO1xuICAgICAgICBhcnIudW5zaGlmdCh7XG4gICAgICAgICAgICB0aXRsZTogZ2V0SXRlbSgnaGlrZXJ0dmJveHNldCcsICcnKSxcbiAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vZW1wdHknLFxuICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJ1xuICAgICAgICB9KTtcbiAgICAgICAgYXJyLnVuc2hpZnQoe1xuICAgICAgICAgICAgdGl0bGU6ICforr7nva5JUOWcsOWdgCcsXG4gICAgICAgICAgICB1cmw6IFwiaW5wdXQ6Ly9cIiArIGdldEl0ZW0oJ2hpa2VydHZib3hzZXQnLCAnaHR0cDovLycgKyBnZXRJUCgpICsgJzo5OTc4JykgKyBcIi8vLy/or7fovpPlhaV0dmJveOaOqOmAgUlQ5Zyw5Z2A77yM5aaCaHR0cDovL1wiICsgZ2V0SVAoKSArIFwiOjk5NzguanM6c2V0SXRlbSgnaGlrZXJ0dmJveHNldCcsaW5wdXQpO3JlZnJlc2hQYWdlKClcIixcbiAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbidcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGNuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcnIucHVzaCh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IGNuW2ldLFxuICAgICAgICAgICAgICAgIHVybDogJCgpLmxhenlSdWxlKCh1KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKFwiY2xzXCIsIHUpO1xuICAgICAgICAgICAgICAgICAgICAvL3JlZnJlc2hYNURlc2MoXCJ0b3AmJmZsb2F0XCIpO1xuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJoaWtlcjovL2VtcHR5XCI7XG4gICAgICAgICAgICAgICAgfSwgY3VbaV0pLFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcInRleHRfMlwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiXCIsXG4gICAgICAgICAgICAgICAgcGljX3VybDogXCJcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVmcmVzaFg1RGVzYyhcIjAmJmZsb2F0XCIpO1xuICAgICAgICBzZXRSZXN1bHQoYXJyKTtcbiAgICB9XG59IGVsc2Uge1xuICAgIGxvYWRVcmwodSk7XG59Iiwic2VhcmNoX3VybCI6IiIsImdyb3VwIjoi4pGm5bel5YW3Iiwic2VhcmNoRmluZCI6IiIsImRldGFpbF9jb2xfdHlwZSI6Im1vdmllXzEiLCJkZXRhaWxfZmluZF9ydWxlIjoiIiwic2RldGFpbF9jb2xfdHlwZSI6Im1vdmllXzEiLCJzZGV0YWlsX2ZpbmRfcnVsZSI6IiIsInVhIjoibW9iaWxlIiwicHJlUnVsZSI6IlxuaWYgKCFnZXRNeVZhcihcImFsaWFjY2Vzc1RrXCIpKSB7XG4gICAgbGV0IG50b2tlbj1bXTtcbiAgICBpZiAoIWZpbGVFeGlzdChcImhpa2VyOi8vZmlsZXMvcnVsZXMvaWN5L2ljeS1hbGktdG9rZW4uanNvblwiKSkge1xuICAgICAgICB2YXIgcmVmdG9rZW4gPSBcIlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZWZ0b2tlbiA9IEpTT04ucGFyc2UoZmV0Y2goJ2hpa2VyOi8vZmlsZXMvcnVsZXMvaWN5L2ljeS1hbGktdG9rZW4uanNvbicsIHt9KSlbMF0ucmVmcmVzaF90b2tlbjtcbiAgICB9XG4gICAgdmFyIHJlZnJlc2ggPSBmZXRjaCgnaHR0cHM6Ly9hdXRoLmFsaXl1bmRyaXZlLmNvbS92Mi9hY2NvdW50L3Rva2VuJywge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBQQ19VQSxcbiAgICAgICAgICAgICdSZWZlcmVyJzogJ2h0dHBzOi8vd3d3LmFsaXl1bmRyaXZlLmNvbS8nXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6ICd7XCJyZWZyZXNoX3Rva2VuXCI6XCInICsgcmVmdG9rZW4gKyAnXCIsXCJncmFudF90eXBlXCI6XCJyZWZyZXNoX3Rva2VuXCJ9JyxcbiAgICAgICAgbWV0aG9kOiAnUE9TVCdcbiAgICB9KTtcbiAgICAvL2xvZyhyZWZyZXNoKTtcbiAgICBpZiAoIWZpbGVFeGlzdChcImhpa2VyOi8vZmlsZXMvcnVsZXMvaWN5L2ljeS1hbGktdG9rZW4uanNvblwiKSB8fCByZWZyZXNoLmxlbmd0aCA+IDMwMCkge1xuICAgICAgICBudG9rZW4ucHVzaChKU09OLnBhcnNlKHJlZnJlc2gpKTtcbiAgICAgICAgd3JpdGVGaWxlKFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9pY3kvaWN5LWFsaS10b2tlbi5qc29uXCIsIEpTT04uc3RyaW5naWZ5KG50b2tlbikpO1xuICAgIH1cbiAgICBcbiAgICB2YXIgcmVmcmVzaCA9IGZldGNoKCdoaWtlcjovL2ZpbGVzL3J1bGVzL2ljeS9pY3ktYWxpLXRva2VuLmpzb24nLCB7fSk7XG4gICAgdmFyIGFjY2Vzc1RrID0gSlNPTi5wYXJzZShyZWZyZXNoKVswXS50b2tlbl90eXBlICsgJyAnICsgSlNPTi5wYXJzZShyZWZyZXNoKVswXS5hY2Nlc3NfdG9rZW47XG4gICAgcHV0TXlWYXIoXCJhbGlhY2Nlc3NUa1wiLCBhY2Nlc3NUayk7XG59XG5cblxuIiwicGFnZXMiOiJbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuaOqOmAgVwiLFwicGF0aFwiOlwicHVzaFwiLFwicnVsZVwiOlwianM6XFxubG9nKE1ZX1VSTCk7XFxudmFyIGl0ZW1zID0gW107XFxudmFyIHJlYWx1cmwgPSBNWV9VUkwuc3BsaXQoJyMjJylbMV07XFxudmFyIHR2aXAgPSBnZXRJdGVtKCdoaWtlcnR2Ym94c2V0JywgJycpO1xcbnZhciBjbHRleHQgPSBnZXRNeVZhcihcXFwibmFtZVxcXCIsIHJlYWx1cmwpO1xcblxcbml0ZW1zLnB1c2goe1xcbiAgICB0aXRsZTogZGVjb2RlVVJJQ29tcG9uZW50KGNsdGV4dCksXFxuICAgIHVybDogXFxcImlucHV0Oi8vXFxcIiArIEpTT04uc3RyaW5naWZ5KHtcXG4gICAgICAgIHZhbHVlOiBcXFwiXFxcIixcXG4gICAgICAgIGhpbnQ6IFxcXCLor7fovpPlhaV0dmJveOaOqOmAgeWGheWuuVxcXCIsXFxuICAgICAgICBqczogJC50b1N0cmluZygoKSA9PiB7XFxuICAgICAgICAgICAgY2xlYXJNeVZhcignbmFtZScpO1xcbiAgICAgICAgICAgIHZhciBudW0gPSBlbmNvZGVVUklDb21wb25lbnQoaW5wdXQpO1xcbiAgICAgICAgICAgIGlmIChudW0gPT0gJycpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+i+k+WFpeeahOWAvOaYr+epuueahOOAgic7XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoJ25hbWUnLCBudW0pO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVmcmVzaFBhZ2UodHJ1ZSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSksXFxuICAgIH0pLFxcbiAgICBjb2xfdHlwZTogJ2ljb25fMV9zZWFyY2gnXFxufSk7XFxuXFxuaWYgKGdldE15VmFyKCduYW1lJywgJycpICE9ICcnKSB7XFxuICAgIHJlYWx1cmwgPSBnZXRNeVZhcignbmFtZScpO1xcbn1cXG4vL2xvZyhcXFwi5a6e6ZmFXFxcIityZWFsdXJsKTtcXG5pZiAodHZpcC5pbmNsdWRlcygnaHR0cCcpKSB7XFxuICAgIGl0ZW1zLnB1c2goe1xcbiAgICAgICAgdGl0bGU6IFxcXCLwn5O9IOaOqOmAgeWIsFRWQm94IPCfk7pcXFwiLFxcbiAgICAgICAgdXJsOiAkKHJlYWx1cmwpLmxhenlSdWxlKCh0dmlwKSA9PiB7XFxuICAgICAgICAgICAgY2xlYXJNeVZhcignbmFtZScpO1xcbiAgICAgICAgICAgIGlucHV0ID0gZGVjb2RlVVJJQ29tcG9uZW50KGlucHV0KTtcXG4gICAgICAgICAgICB2YXIgcHVybCA9IGlucHV0LnNwbGl0KFxcXCI7XFxcIilbMF07XFxuICAgICAgICAgICAgaWYgKHB1cmwuaW5jbHVkZXMoXFxcIlxcXFxuXFxcIikpIHtcXG4gICAgICAgICAgICAgICAgcHVybCA9IHB1cmwucmVwbGFjZShcXFwiXFxcXG5cXFwiLCAnJCcpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB2YXIgaGVhZCA9IGlucHV0LnNwbGl0KFxcXCI7XFxcIilbMV07XFxuICAgICAgICAgICAgaWYgKGlucHV0LnN0YXJ0c1dpdGgoXFxcIntcXFwiKSAmJiBpbnB1dC5lbmRzV2l0aChcXFwifVxcXCIpKSB7XFxuICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICBwdXJsID0gaW5wdXQucmVwbGFjZSgvXFxcXCYvZywgJ++8hu+8hicpO1xcbiAgICAgICAgICAgICAgICAvL2xvZyhwdXJsKTtcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhlYWQgIT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICAgICAgICAgIHZhciBoZWFkID0gaW5wdXQuc3BsaXQoXFxcIjt7XFxcIilbMV0uc3BsaXQoXFxcIn1cXFwiKVswXS5zcGxpdChcXFwiJiZcXFwiKTtcXG4gICAgICAgICAgICAgICAgdmFyIHB1cmwgPSBpbnB1dC5zcGxpdChcXFwiO3tcXFwiKVswXS5yZXBsYWNlKC9cXFxcJi9nLCAn77yG77yGJyk7XFxuXFxuICAgICAgICAgICAgICAgIHZhciBhYWEgPSBcXFwiXFxcIjtcXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoZWFkLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICAgICAgICAgICAgICBsZXQga2V5ID0gaGVhZFtpXS5zcGxpdChcXFwiQFxcXCIpWzBdO1xcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhbCA9IGhlYWRbaV0uc3BsaXQoXFxcIkBcXFwiKVsxXS5yZXBsYWNlKC9cXFxc77ybXFxcXO+8my9nLCAnOycpO1xcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZ2diA9IGtleSArIFxcXCI9XFxcIiArIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpO1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPCAxKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYWFhID0gdnZ2O1xcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBhYWEgKz0gXFxcIiZcXFwiICsgdnZ2XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgcHVybCA9IHB1cmwgKyBcXFwifFxcXCIgKyBhYWE7XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgcHVybCA9IHB1cmwucmVwbGFjZSgvXFxcXCYvZywgJ++8hu+8hicpXFxuXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIC8vbG9nKHB1cmwpO1xcbiAgICAgICAgICAgIC8vbG9nKHR2aXApO1xcblxcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHJlcXVlc3QodHZpcCArICcvYWN0aW9uJywge1xcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXFxuICAgICAgICAgICAgICAgICAgICAvLydYLVJlcXVlc3RlZC1XaXRoJzogJ1hNTEh0dHBSZXF1ZXN0JyxcXG4gICAgICAgICAgICAgICAgICAgICdSZWZlcmVyJzogdHZpcFxcbiAgICAgICAgICAgICAgICB9LFxcbiAgICAgICAgICAgICAgICB0aW1lb3V0OiAyMDAwLFxcbiAgICAgICAgICAgICAgICBib2R5OiAnZG89cHVzaCZ1cmw9JyArIHB1cmwsXFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnXFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgbG9nKHN0YXRlKTtcXG4gICAgICAgICAgICBpZiAoc3RhdGUgPT0gJ29rJykge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5o6o6YCB5oiQ5Yqf77yM5aaC5p6cdHZib3jmmL7npLrigJzmsqHmib7liLDmlbDmja7igJ3lj6/og73mmK/or6Xpk77mjqXpnIDopoHlr4bnoIHmiJbogIXlvZPliY3nmoRqYXLkuI3mlK/mjIHjgIInO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/mjqjpgIHlpLHotKUnXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSwgdHZpcCksXFxuICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfY2VudGVyXzFcXFwiLFxcbiAgICAgICAgZGVzYzogXFxcIlxcXCIsXFxuICAgICAgICBwaWNfdXJsOiBcXFwiXFxcIlxcbiAgICB9KTtcXG59IGVsc2Uge1xcbiAgICBpdGVtcy5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiAn5o6o6YCB5aSx6LSl77yMSVDlnLDlnYDorr7nva7kuI3mraPnoa7jgIInLFxcbiAgICAgICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJ1xcbiAgICB9KTtcXG59XFxuaWYgKGRlY29kZVVSSUNvbXBvbmVudChyZWFsdXJsKS5pbmNsdWRlcygnd3d3LmFsaXl1bmRyaXZlJykgJiYgIXJlYWx1cmwuaW5jbHVkZXMoJyUzQiU3QicpKSB7XFxuICAgIGV2YWwoSlNPTi5wYXJzZShmZXRjaCgnaGlrZXI6Ly9wYWdlL3NoYXJpZCcsIHt9KSkucnVsZSlcXG59XFxuc2V0UmVzdWx0KGl0ZW1zKTtcIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuWIhuS6q+i1hOa6kOS4gOe6p1wiLFwicGF0aFwiOlwic2hhcmlkXCIsXCJydWxlXCI6XCJqczpcXG4vL3ZhciBpdGVtcyA9IFtdO1xcbmZ1bmN0aW9uIGZvcm1hdERhdGUoX2RhdGUsIF9mbXQpIHtcXG4gICAgbGV0IGZtdCA9IF9mbXQgfHwgXFxcInl5eXktTU0tZGQgSEg6bW06c3NcXFwiO1xcbiAgICBjb25zdCBkYXRlID0gIWlzTmFOKF9kYXRlKSA/IG5ldyBEYXRlKF9kYXRlICogMTAwMCkgOiBuZXcgRGF0ZShfZGF0ZSk7XFxuICAgIGNvbnN0IG8gPSB7XFxuICAgICAgICBcXFwiTStcXFwiOiBkYXRlLmdldE1vbnRoKCkgKyAxLCAvL+aciOS7vSBcXG4gICAgICAgIFxcXCJkK1xcXCI6IGRhdGUuZ2V0RGF0ZSgpLCAvL+aXpSBcXG4gICAgICAgIFxcXCJoK1xcXCI6IGRhdGUuZ2V0SG91cnMoKSAlIDEyID09IDAgPyAxMiA6IGRhdGUuZ2V0SG91cnMoKSAlIDEyLFxcbiAgICAgICAgXFxcIkgrXFxcIjogZGF0ZS5nZXRIb3VycygpLCAvL+Wwj+aXtiBcXG4gICAgICAgIFxcXCJtK1xcXCI6IGRhdGUuZ2V0TWludXRlcygpLCAvL+WIhiBcXG4gICAgICAgIFxcXCJzK1xcXCI6IGRhdGUuZ2V0U2Vjb25kcygpLCAvL+enkiBcXG4gICAgICAgIFxcXCJxK1xcXCI6IE1hdGguZmxvb3IoKGRhdGUuZ2V0TW9udGgoKSArIDMpIC8gMyksIC8v5a2j5bqmIFxcbiAgICAgICAgXFxcIlNcXFwiOiBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC8v5q+r56eSIFxcbiAgICB9O1xcbiAgICBpZiAoLyh5KykvLnRlc3QoZm10KSkge1xcbiAgICAgICAgZm10ID0gZm10LnJlcGxhY2UoUmVnRXhwLiQxLCAoZGF0ZS5nZXRGdWxsWWVhcigpICsgXFxcIlxcXCIpLnN1YnN0cig0IC0gUmVnRXhwLiQxLmxlbmd0aCkpO1xcbiAgICB9XFxuICAgIGZvciAobGV0IGsgaW4gbykge1xcbiAgICAgICAgaWYgKG5ldyBSZWdFeHAoXFxcIihcXFwiICsgayArIFxcXCIpXFxcIikudGVzdChmbXQpKSB7XFxuICAgICAgICAgICAgZm10ID0gZm10LnJlcGxhY2UoUmVnRXhwLiQxLCAoUmVnRXhwLiQxLmxlbmd0aCA9PSAxKSA/IChvW2tdKSA6ICgoXFxcIjAwXFxcIiArIG9ba10pLnN1YnN0cigoXFxcIlxcXCIgKyBvW2tdKS5sZW5ndGgpKSk7XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgcmV0dXJuIGZtdDtcXG59O1xcblxcbmZ1bmN0aW9uIGZvcm1hdFNpemUoc2l6ZSkge1xcbiAgICBpZiAoIXNpemUpIHtcXG4gICAgICAgIHJldHVybiAnJztcXG4gICAgfVxcbiAgICBjb25zdCB1bml0cyA9IFsnQicsICdLQicsICdNQicsICdHQicsICdUQicsICdQQicsICdFQicsICdaQicsICdZQiddO1xcbiAgICBsZXQgaSA9IDA7XFxuICAgIHdoaWxlIChzaXplID49IDEwMjQpIHtcXG4gICAgICAgIHNpemUgLz0gMTAyNDtcXG4gICAgICAgIGkrKztcXG4gICAgfVxcbiAgICBzaXplID0gaSA/IE51bWJlcihzaXplLnRvRml4ZWQoMikpIDogc2l6ZTtcXG4gICAgcmV0dXJuIGAke3NpemV9ICR7dW5pdHNbaV19YDtcXG59XFxuLy9sb2cocmVhbHVybCk7XFxudHJ5IHtcXG4gICAgLy92YXIgcmVmdG9rZW4gPSBKU09OLnBhcnNlKGZldGNoKCdoaWtlcjovL2ZpbGVzL3J1bGVzL3h5cS9hbGl0b2tlbi5qc29uJywge30pKS5yZWZyZXNoX3Rva2VuO1xcbiAgICB2YXIgcmVmdG9rZW4gPSBKU09OLnBhcnNlKGZldGNoKCdoaWtlcjovL2ZpbGVzL3J1bGVzL2ljeS9pY3ktYWxpLXRva2VuLmpzb24nLCB7fSkpWzBdLnJlZnJlc2hfdG9rZW47XFxuICAgIHZhciBzaGFyZUlkID0gZGVjb2RlVVJJQ29tcG9uZW50KHJlYWx1cmwpLnNwbGl0KCdjb20vcy8nKVsxXS5zdWJzdHJpbmcoMCwgMTEpO1xcbiAgICB2YXIgc2hhcmV0b2tlbiA9IEpTT04ucGFyc2UoZmV0Y2goJ2h0dHBzOi8vYXBpLmFsaXl1bmRyaXZlLmNvbS92Mi9zaGFyZV9saW5rL2dldF9zaGFyZV90b2tlbicsIHtcXG4gICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXFxuICAgICAgICB9LFxcbiAgICAgICAgYm9keTogJ3tcXFwic2hhcmVfcHdkXFxcIjpcXFwiXFxcIixcXFwic2hhcmVfaWRcXFwiOlxcXCInICsgc2hhcmVJZCArICdcXFwifScsXFxuICAgICAgICBtZXRob2Q6ICdQT1NUJ1xcbiAgICB9KSkuc2hhcmVfdG9rZW47XFxuICAgIC8vbG9nKHNoYXJldG9rZW4pO1xcbiAgICBpZiAoIWRlY29kZVVSSUNvbXBvbmVudChyZWFsdXJsKS5pbmNsdWRlcygnL2ZvbGRlci8nKSkge1xcbiAgICAgICAgdmFyIHJlc2NvZCA9IGZldGNoKCdodHRwczovL2FwaS5hbGl5dW5kcml2ZS5jb20vYWRyaXZlL3YzL2ZpbGUvbGlzdCcsIHtcXG4gICAgICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXFxuICAgICAgICAgICAgICAgICdYLVNoYXJlLVRva2VuJzogc2hhcmV0b2tlblxcbiAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgYm9keTogJ3tcXFwic2hhcmVfaWRcXFwiOlxcXCInICsgc2hhcmVJZCArICdcXFwiLFxcXCJwYXJlbnRfZmlsZV9pZFxcXCI6XFxcInJvb3RcXFwiLFxcXCJsaW1pdFxcXCI6MTAwLFxcXCJpbWFnZV90aHVtYm5haWxfcHJvY2Vzc1xcXCI6XFxcImltYWdlL3Jlc2l6ZSx3XzE2MC9mb3JtYXQsanBlZ1xcXCIsXFxcImltYWdlX3VybF9wcm9jZXNzXFxcIjpcXFwiaW1hZ2UvcmVzaXplLHdfMTkyMC9mb3JtYXQsanBlZ1xcXCIsXFxcInZpZGVvX3RodW1ibmFpbF9wcm9jZXNzXFxcIjpcXFwidmlkZW8vc25hcHNob3QsdF8xMDAwLGZfanBnLGFyX2F1dG8sd18zMDBcXFwiLFxcXCJvcmRlcl9ieVxcXCI6XFxcIm5hbWVcXFwiLFxcXCJvcmRlcl9kaXJlY3Rpb25cXFwiOlxcXCJBU0NcXFwifScsXFxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCdcXG4gICAgICAgIH0pO1xcbiAgICAgICAgLy9sb2cocmVzY29kKTtcXG4gICAgICAgIHZhciBsaXN0eXAgPSBKU09OLnBhcnNlKHJlc2NvZCkuaXRlbXNbMF0udHlwZTtcXG4gICAgICAgIHZhciBwZmlsZWlkID0gSlNPTi5wYXJzZShyZXNjb2QpLml0ZW1zWzBdLmZpbGVfaWQ7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICB2YXIgbGlzdHlwID0gJ2ZvbGRlcic7XFxuICAgICAgICB2YXIgcGZpbGVpZCA9IGRlY29kZVVSSUNvbXBvbmVudChyZWFsdXJsKS5zcGxpdCgnZm9sZGVyLycpWzFdXFxuXFxuICAgIH1cXG4gICAgLy9sb2coaHRtbCk7XFxuICAgIGlmIChsaXN0eXAgPT0gJ2ZvbGRlcicpIHtcXG4gICAgICAgIHZhciByZXNjb2QgPSBmZXRjaCgnaHR0cHM6Ly9hcGkuYWxpeXVuZHJpdmUuY29tL2Fkcml2ZS92My9maWxlL2xpc3QnLCB7XFxuICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxcbiAgICAgICAgICAgICAgICAnWC1TaGFyZS1Ub2tlbic6IHNoYXJldG9rZW5cXG4gICAgICAgICAgICB9LFxcbiAgICAgICAgICAgIGJvZHk6ICd7XFxcInNoYXJlX2lkXFxcIjpcXFwiJyArIHNoYXJlSWQgKyAnXFxcIixcXFwicGFyZW50X2ZpbGVfaWRcXFwiOlxcXCInICsgcGZpbGVpZCArICdcXFwiLFxcXCJsaW1pdFxcXCI6MTAwLFxcXCJpbWFnZV90aHVtYm5haWxfcHJvY2Vzc1xcXCI6XFxcImltYWdlL3Jlc2l6ZSx3XzE2MC9mb3JtYXQsanBlZ1xcXCIsXFxcImltYWdlX3VybF9wcm9jZXNzXFxcIjpcXFwiaW1hZ2VcXFxcL3Jlc2l6ZSx3XzE5MjAvZm9ybWF0LGpwZWdcXFwiLFxcXCJ2aWRlb190aHVtYm5haWxfcHJvY2Vzc1xcXCI6XFxcInZpZGVvL3NuYXBzaG90LHRfMTAwMCxmX2pwZyxhcl9hdXRvLHdfMzAwXFxcIixcXFwib3JkZXJfYnlcXFwiOlxcXCJuYW1lXFxcIixcXFwib3JkZXJfZGlyZWN0aW9uXFxcIjpcXFwiQVNDXFxcIn0nLFxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnXFxuICAgICAgICB9KTtcXG5cXG4gICAgfSAvL+WPluaWh+S7tuWkuVxcbiAgICAvL2xvZyhyZXNjb2QpO1xcbiAgICB2YXIgY29udHMgPSBKU09OLnBhcnNlKHJlc2NvZCkuaXRlbXM7XFxuICAgIHZhciBkb25ndGFpID0gSlNPTi5wYXJzZShmZXRjaCgnaGlrZXI6Ly9wYWdlL2xhenl1cmwnLCB7fSkpLnJ1bGUudG9TdHJpbmcoKTtcXG4gICAgdmFyIHR1aXNvbmcgPSBbXTtcXG4gICAgZm9yICh2YXIgaSBpbiBjb250cykge1xcbiAgICAgICAgdmFyIGxpc3R5cCA9IGNvbnRzW2ldLnR5cGU7XFxuICAgICAgICBpZiAobGlzdHlwICE9ICdmb2xkZXInKSB7XFxuICAgICAgICAgICAgdmFyIGNhdGUgPSBjb250c1tpXS5jYXRlZ29yeTtcXG4gICAgICAgICAgICB2YXIgZm5hbWUgPSBjb250c1tpXS5uYW1lO1xcbiAgICAgICAgICAgIGlmIChjYXRlID09ICd2aWRlbycpIHtcXG4gICAgICAgICAgICAgICAgdmFyIHRpdGxlID0gJ/Cfk7onICsgY29udHNbaV0ubmFtZTtcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNhdGUgPT0gJ2RvYycpIHtcXG4gICAgICAgICAgICAgICAgdmFyIHRpdGxlID0gJ/Cfk5YnICsgY29udHNbaV0ubmFtZTtcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNhdGUgPT0gJ2ltYWdlJykge1xcbiAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSAn8J+WvCcgKyBjb250c1tpXS5uYW1lO1xcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2F0ZSA9PSAnemlwJykge1xcbiAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSAn8J+TpicgKyBjb250c1tpXS5uYW1lO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHZhciB0aXRsZSA9IGNvbnRzW2ldLm5hbWVcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaXRlbXMucHVzaCh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKGNvbnRzW2ldLmZpbGVfaWQpLmxhenlSdWxlKChzaGFyZUlkLCBzaGFyZXRva2VuLCBkb25ndGFpLCBjYXRlLCBmbmFtZSkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgZXZhbChkb25ndGFpKTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwbGF5XFxuICAgICAgICAgICAgICAgIH0sIHNoYXJlSWQsIHNoYXJldG9rZW4sIGRvbmd0YWksIGNhdGUsIGZuYW1lKSxcXG4gICAgICAgICAgICAgICAgZGVzYzogZm9ybWF0RGF0ZShjb250c1tpXS51cGRhdGVkX2F0KSArICcgICcgKyBmb3JtYXRTaXplKGNvbnRzW2ldLnNpemUpLFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfMSdcXG5cXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICBpZiAoY2F0ZSA9PSAndmlkZW8nIHx8IGNhdGUgPT0gJ2F1ZGlvJykge1xcbiAgICAgICAgICAgIHR1aXNvbmcucHVzaChcXG4gICAgICAgICAgICAgICAgdGl0bGUucmVwbGFjZSgvXFxcXCMvZywgJ18nKS5yZXBsYWNlKC9cXFxcJC9nLCAnXycpICsgJyQnICsgY2F0ZSArICd8JyArIGNvbnRzW2ldLmZpbGVfaWRcXG4gICAgICAgICAgICApO1xcbiAgICAgICAgfVxcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6ICfwn5OCJyArIGNvbnRzW2ldLm5hbWUsXFxuICAgICAgICAgICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eScgKyBjb250c1tpXS5maWxlX2lkKS5ydWxlKChzaGFyZUlkLCBzaGFyZXRva2VuKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBldmFsKEpTT04ucGFyc2UoZmV0Y2goJ2hpa2VyOi8vcGFnZS9ydWxlbG9vcCcsIHt9KSkucnVsZSk7XFxuICAgICAgICAgICAgICAgIH0sIHNoYXJlSWQsIHNoYXJldG9rZW4pLFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2ZsZXhfYnV0dG9uJ1xcbiAgICAgICAgICAgIH0pO1xcblxcbiAgICAgICAgfSAvL2VuZCBpZlxcbiAgICB9IC8vZW5kIGZvciBpXFxuICAgIC8vbG9nKHR1aXNvbmcpO1xcbiAgICBldmFsKEpTT04ucGFyc2UoZmV0Y2goJ2hpa2VyOi8vcGFnZS9wdXNoY29kZScsIHt9KSkucnVsZSk7XFxufSBjYXRjaCAoZSkge1xcbiAgICBpdGVtcy5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiAn5qyn5qyn77yM5oql6ZSZ5LqG44CCJyxcXG4gICAgICAgIHVybDogZGVjb2RlVVJJQ29tcG9uZW50KGdldFJlc0NvZGUoKS5zcGxpdCgnIyMnKVsxXSksXFxuICAgICAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnXFxuICAgIH0pO1xcbn1cXG4vKlxcbnNldEhvbWVSZXN1bHQoe1xcbiAgICBkYXRhOiBpdGVtc1xcbn0pO1xcbiovXCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLliIbkuqvotYTmupDltYzlpZdcIixcInBhdGhcIjpcInJ1bGVsb29wXCIsXCJydWxlXCI6XCJ2YXIgaXRlbXMgPSBbXTtcXG5cXG5mdW5jdGlvbiBmb3JtYXREYXRlKF9kYXRlLCBfZm10KSB7XFxuICAgIGxldCBmbXQgPSBfZm10IHx8IFxcXCJ5eXl5LU1NLWRkIEhIOm1tOnNzXFxcIjtcXG4gICAgY29uc3QgZGF0ZSA9ICFpc05hTihfZGF0ZSkgPyBuZXcgRGF0ZShfZGF0ZSAqIDEwMDApIDogbmV3IERhdGUoX2RhdGUpO1xcbiAgICBjb25zdCBvID0ge1xcbiAgICAgICAgXFxcIk0rXFxcIjogZGF0ZS5nZXRNb250aCgpICsgMSwgLy/mnIjku70gXFxuICAgICAgICBcXFwiZCtcXFwiOiBkYXRlLmdldERhdGUoKSwgLy/ml6UgXFxuICAgICAgICBcXFwiaCtcXFwiOiBkYXRlLmdldEhvdXJzKCkgJSAxMiA9PSAwID8gMTIgOiBkYXRlLmdldEhvdXJzKCkgJSAxMixcXG4gICAgICAgIFxcXCJIK1xcXCI6IGRhdGUuZ2V0SG91cnMoKSwgLy/lsI/ml7YgXFxuICAgICAgICBcXFwibStcXFwiOiBkYXRlLmdldE1pbnV0ZXMoKSwgLy/liIYgXFxuICAgICAgICBcXFwicytcXFwiOiBkYXRlLmdldFNlY29uZHMoKSwgLy/np5IgXFxuICAgICAgICBcXFwicStcXFwiOiBNYXRoLmZsb29yKChkYXRlLmdldE1vbnRoKCkgKyAzKSAvIDMpLCAvL+Wto+W6piBcXG4gICAgICAgIFxcXCJTXFxcIjogZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAvL+avq+enkiBcXG4gICAgfTtcXG4gICAgaWYgKC8oeSspLy50ZXN0KGZtdCkpIHtcXG4gICAgICAgIGZtdCA9IGZtdC5yZXBsYWNlKFJlZ0V4cC4kMSwgKGRhdGUuZ2V0RnVsbFllYXIoKSArIFxcXCJcXFwiKS5zdWJzdHIoNCAtIFJlZ0V4cC4kMS5sZW5ndGgpKTtcXG4gICAgfVxcbiAgICBmb3IgKGxldCBrIGluIG8pIHtcXG4gICAgICAgIGlmIChuZXcgUmVnRXhwKFxcXCIoXFxcIiArIGsgKyBcXFwiKVxcXCIpLnRlc3QoZm10KSkge1xcbiAgICAgICAgICAgIGZtdCA9IGZtdC5yZXBsYWNlKFJlZ0V4cC4kMSwgKFJlZ0V4cC4kMS5sZW5ndGggPT0gMSkgPyAob1trXSkgOiAoKFxcXCIwMFxcXCIgKyBvW2tdKS5zdWJzdHIoKFxcXCJcXFwiICsgb1trXSkubGVuZ3RoKSkpO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIHJldHVybiBmbXQ7XFxufTtcXG5cXG5mdW5jdGlvbiBmb3JtYXRTaXplKHNpemUpIHtcXG4gICAgaWYgKCFzaXplKSB7XFxuICAgICAgICByZXR1cm4gJyc7XFxuICAgIH1cXG4gICAgY29uc3QgdW5pdHMgPSBbJ0InLCAnS0InLCAnTUInLCAnR0InLCAnVEInLCAnUEInLCAnRUInLCAnWkInLCAnWUInXTtcXG4gICAgbGV0IGkgPSAwO1xcbiAgICB3aGlsZSAoc2l6ZSA+PSAxMDI0KSB7XFxuICAgICAgICBzaXplIC89IDEwMjQ7XFxuICAgICAgICBpKys7XFxuICAgIH1cXG4gICAgc2l6ZSA9IGkgPyBOdW1iZXIoc2l6ZS50b0ZpeGVkKDIpKSA6IHNpemU7XFxuICAgIHJldHVybiBgJHtzaXplfSAke3VuaXRzW2ldfWA7XFxufVxcbnZhciByZWZ0b2tlbiA9IEpTT04ucGFyc2UoZmV0Y2goJ2hpa2VyOi8vZmlsZXMvcnVsZXMveHlxL2FsaXRva2VuLmpzb24nLCB7fSkpLnJlZnJlc2hfdG9rZW47XFxuICAgIFxcbnZhciByZXNjb2QgPSBmZXRjaCgnaHR0cHM6Ly9hcGkuYWxpeXVuZHJpdmUuY29tL2Fkcml2ZS92My9maWxlL2xpc3QnLCB7XFxuICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXFxuICAgICAgICAnWC1TaGFyZS1Ub2tlbic6IHNoYXJldG9rZW5cXG4gICAgfSxcXG4gICAgYm9keTogJ3tcXFwic2hhcmVfaWRcXFwiOlxcXCInICsgc2hhcmVJZCArICdcXFwiLFxcXCJwYXJlbnRfZmlsZV9pZFxcXCI6XFxcIicgKyBnZXRSZXNDb2RlKCkgKyAnXFxcIixcXFwibGltaXRcXFwiOjEwMCxcXFwiaW1hZ2VfdGh1bWJuYWlsX3Byb2Nlc3NcXFwiOlxcXCJpbWFnZS9yZXNpemUsd18xNjAvZm9ybWF0LGpwZWdcXFwiLFxcXCJpbWFnZV91cmxfcHJvY2Vzc1xcXCI6XFxcImltYWdlXFxcXC9yZXNpemUsd18xOTIwL2Zvcm1hdCxqcGVnXFxcIixcXFwidmlkZW9fdGh1bWJuYWlsX3Byb2Nlc3NcXFwiOlxcXCJ2aWRlby9zbmFwc2hvdCx0XzEwMDAsZl9qcGcsYXJfYXV0byx3XzMwMFxcXCIsXFxcIm9yZGVyX2J5XFxcIjpcXFwibmFtZVxcXCIsXFxcIm9yZGVyX2RpcmVjdGlvblxcXCI6XFxcIkFTQ1xcXCJ9JyxcXG4gICAgbWV0aG9kOiAnUE9TVCdcXG59KTtcXG4vL2xvZyhyZXNjb2QpO1xcbnZhciBjb250cyA9IEpTT04ucGFyc2UocmVzY29kKS5pdGVtcztcXG52YXIgZG9uZ3RhaSA9IEpTT04ucGFyc2UoZmV0Y2goJ2hpa2VyOi8vcGFnZS9sYXp5dXJsJywge30pKS5ydWxlLnRvU3RyaW5nKCk7XFxudmFyIHR1aXNvbmcgPSBbXTtcXG5mb3IgKHZhciBpIGluIGNvbnRzKSB7XFxuXFxuICAgIHZhciBsaXN0eXAgPSBjb250c1tpXS50eXBlO1xcbiAgICBpZiAobGlzdHlwICE9ICdmb2xkZXInKSB7XFxuICAgICAgICB2YXIgY2F0ZSA9IGNvbnRzW2ldLmNhdGVnb3J5O1xcbiAgICAgICAgdmFyIGZuYW1lID0gY29udHNbaV0ubmFtZTtcXG4gICAgICAgIGlmIChjYXRlID09ICd2aWRlbycpIHtcXG4gICAgICAgICAgICB2YXIgdGl0bGUgPSAn8J+TuicgKyBjb250c1tpXS5uYW1lO1xcbiAgICAgICAgfSBlbHNlIGlmIChjYXRlID09ICdkb2MnKSB7XFxuICAgICAgICAgICAgdmFyIHRpdGxlID0gJ/Cfk5YnICsgY29udHNbaV0ubmFtZTtcXG4gICAgICAgIH0gZWxzZSBpZiAoY2F0ZSA9PSAnaW1hZ2UnKSB7XFxuICAgICAgICAgICAgdmFyIHRpdGxlID0gJ/CflrwnICsgY29udHNbaV0ubmFtZTtcXG4gICAgICAgIH0gZWxzZSBpZiAoY2F0ZSA9PSAnemlwJykge1xcbiAgICAgICAgICAgIHZhciB0aXRsZSA9ICfwn5OmJyArIGNvbnRzW2ldLm5hbWU7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHZhciB0aXRsZSA9IGNvbnRzW2ldLm5hbWVcXG4gICAgICAgIH1cXG4gICAgICAgIGl0ZW1zLnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcXG4gICAgICAgICAgICB1cmw6ICQoY29udHNbaV0uZmlsZV9pZCkubGF6eVJ1bGUoKHNoYXJlSWQsIHNoYXJldG9rZW4sIGRvbmd0YWksIGNhdGUsIGZuYW1lKSA9PiB7XFxuICAgICAgICAgICAgICAgIGV2YWwoZG9uZ3RhaSk7XFxuICAgICAgICAgICAgICAgIHJldHVybiBwbGF5XFxuICAgICAgICAgICAgfSwgc2hhcmVJZCwgc2hhcmV0b2tlbiwgZG9uZ3RhaSwgY2F0ZSwgZm5hbWUpLFxcbiAgICAgICAgICAgIGRlc2M6IGZvcm1hdERhdGUoY29udHNbaV0udXBkYXRlZF9hdCkgKyAnICAnICsgZm9ybWF0U2l6ZShjb250c1tpXS5zaXplKSxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfMSdcXG5cXG4gICAgICAgIH0pO1xcbiAgICAgICAgaWYgKGNhdGUgPT0gJ3ZpZGVvJyB8fCBjYXRlID09ICdhdWRpbycpIHtcXG4gICAgICAgICAgICB0dWlzb25nLnB1c2goXFxuICAgICAgICAgICAgICAgIHRpdGxlLnJlcGxhY2UoL1xcXFwjL2csICdfJykucmVwbGFjZSgvXFxcXCQvZywgJ18nKSArICckJyArIGNhdGUgKyAnfCcgKyBjb250c1tpXS5maWxlX2lkXFxuICAgICAgICAgICAgKTtcXG4gICAgICAgIH1cXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIGl0ZW1zLnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiAn8J+TgicgKyBjb250c1tpXS5uYW1lLFxcbiAgICAgICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eScgKyBjb250c1tpXS5maWxlX2lkKS5ydWxlKChzaGFyZUlkLCBzaGFyZXRva2VuKSA9PiB7XFxuICAgICAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShmZXRjaCgnaGlrZXI6Ly9wYWdlL3J1bGVsb29wJywge30pKS5ydWxlKTtcXG4gICAgICAgICAgICB9LCBzaGFyZUlkLCBzaGFyZXRva2VuKSxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ2ZsZXhfYnV0dG9uJ1xcbiAgICAgICAgfSk7XFxuXFxuICAgIH0gLy9lbmQgaWZcXG5cXG5cXG59XFxuZXZhbChKU09OLnBhcnNlKGZldGNoKCdoaWtlcjovL3BhZ2UvcHVzaGNvZGUnLCB7fSkpLnJ1bGUpO1xcbnNldEhvbWVSZXN1bHQoe1xcbiAgICBkYXRhOiBpdGVtc1xcbn0pO1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwi5YiG5Lqr6LWE5rqQ5Yqo5oCB6Kej5p6QXCIsXCJwYXRoXCI6XCJsYXp5dXJsXCIsXCJydWxlXCI6XCJmdW5jdGlvbiBhY2Nlc3NUaygpIHtcXG4gICAgbGV0IG50b2tlbiA9IFtdO1xcbiAgICAvL2xldCByZWZ0b2tlbiA9IHJlcXVlc3QoJ2h0dHA6Ly9ob21lLmp1bmRpZS50b3A6ODEvamFyL3Rva2VuNjY2LnR4dCcsIHt9KTtcXG4gICAgLy92YXIgcmVmdG9rZW4gPSBKU09OLnBhcnNlKGZldGNoKCdoaWtlcjovL2ZpbGVzL3J1bGVzL3h5cS9hbGl0b2tlbi5qc29uJywge30pKS5yZWZyZXNoX3Rva2VuO1xcbiAgICB2YXIgcmVmdG9rZW4gPSBKU09OLnBhcnNlKGZldGNoKCdoaWtlcjovL2ZpbGVzL3J1bGVzL2ljeS9pY3ktYWxpLXRva2VuLmpzb24nLCB7fSkpWzBdLnJlZnJlc2hfdG9rZW47XFxuICAgIGxldCBhY2Nlc3NUayA9IFxcXCJcXFwiO1xcbiAgICBsZXQgcmVmcmVzaCA9IGZldGNoKCdodHRwczovL2F1dGguYWxpeXVuZHJpdmUuY29tL3YyL2FjY291bnQvdG9rZW4nLCB7XFxuICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcXG4gICAgICAgICAgICAnUmVmZXJlcic6ICdodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vJ1xcbiAgICAgICAgfSxcXG4gICAgICAgIGJvZHk6ICd7XFxcInJlZnJlc2hfdG9rZW5cXFwiOlxcXCInICsgcmVmdG9rZW4gKyAnXFxcIixcXFwiZ3JhbnRfdHlwZVxcXCI6XFxcInJlZnJlc2hfdG9rZW5cXFwifScsXFxuICAgICAgICBtZXRob2Q6ICdQT1NUJ1xcbiAgICB9KTtcXG4gICAgbnRva2VuLnB1c2goSlNPTi5wYXJzZShyZWZyZXNoKSk7XFxuICAgIGlmICghZmlsZUV4aXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2ljeS9pY3ktYWxpLXRva2VuLmpzb25cXFwiKSB8fCByZWZyZXNoLmxlbmd0aCA+IDMwMCkge1xcbiAgICAgICAgd3JpdGVGaWxlKFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2ljeS9pY3ktYWxpLXRva2VuLmpzb25cXFwiLCBKU09OLnN0cmluZ2lmeShudG9rZW4pKTtcXG4gICAgfVxcbiAgICBhY2Nlc3NUayA9IEpTT04ucGFyc2UocmVmcmVzaCkudG9rZW5fdHlwZSArICcgJyArIEpTT04ucGFyc2UocmVmcmVzaCkuYWNjZXNzX3Rva2VuO1xcbiAgICBwdXRNeVZhcihcXFwiYWxpYWNjZXNzVGtcXFwiLCBhY2Nlc3NUayk7XFxuICAgIHJldHVybiBhY2Nlc3NUa1xcbiAgICAvL3B1dFZhcihcXFwiYWxpYWNjZXNzVGtcXFwiLCBhY2Nlc3NUayk7XFxufVxcblxcbmlmIChjYXRlID09ICd2aWRlbyd8fGNhdGUgPT0gJ2F1ZGlvJykge1xcbiAgICAvL+WkhOeQhuinhumikSAgXFxuICAgIHZhciBkc2lkID0gc2hhcmVJZDtcXG4gICAgdmFyIGRmaWQgPSBpbnB1dDtcXG4gICAgaWYoY2F0ZSA9PSAndmlkZW8nKXtcXG4gICAgdmFyIGpzb24gPSBmZXRjaCgnaHR0cHM6Ly9hcGkuYWxpeXVuZHJpdmUuY29tL3YyL2ZpbGUvZ2V0X3NoYXJlX2xpbmtfdmlkZW9fcHJldmlld19wbGF5X2luZm8nLCB7XFxuICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcXG4gICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IGFjY2Vzc1RrKCksXFxuICAgICAgICAgICAgJ1gtU2hhcmUtVG9rZW4nOiBzaGFyZXRva2VuXFxuICAgICAgICB9LFxcbiAgICAgICAgYm9keTogJ3tcXFwic2hhcmVfaWRcXFwiOlxcXCInICsgc2hhcmVJZCArICdcXFwiLFxcXCJjYXRlZ29yeVxcXCI6XFxcImxpdmVfdHJhbnNjb2RpbmdcXFwiLFxcXCJmaWxlX2lkXFxcIjpcXFwiJyArIGlucHV0ICsgJ1xcXCIsXFxcInRlbXBsYXRlX2lkXFxcIjpcXFwiXFxcIn0nLFxcbiAgICAgICAgbWV0aG9kOiAnUE9TVCdcXG4gICAgfSk7XFxuICAgIC8vbG9nKGpzb24pO1xcbiAgICBcXG4gICAgdmFyIGRzaWQgPSBKU09OLnBhcnNlKGpzb24pLnNoYXJlX2lkO1xcbiAgICB2YXIgZGZpZCA9IEpTT04ucGFyc2UoanNvbikuZmlsZV9pZDtcXG4gICAgfVxcbiAgICBpZihjYXRlID09ICd2aWRlbycpe1xcbiAgICAgICB2YXIgYm9keT0ne1xcXCJleHBpcmVfc2VjXFxcIjo2MDAsXFxcImZpbGVfaWRcXFwiOlxcXCInICsgZGZpZCArICdcXFwiLFxcXCJzaGFyZV9pZFxcXCI6XFxcIicgKyBkc2lkICsgJ1xcXCJ9JztcXG4gICAgICAgIFxcbiAgICB9ZWxzZXtcXG4gICAgICB2YXIgYm9keT0ne1xcXCJmaWxlX2lkXFxcIjpcXFwiJyArIGRmaWQgKyAnXFxcIixcXFwiZ2V0X2F1ZGlvX3BsYXlfaW5mb1xcXCI6dHJ1ZSxcXFwic2hhcmVfaWRcXFwiOlxcXCInICsgZHNpZCArICdcXFwifSc7ICAgXFxuICAgIH1cXG4gICAgdmFyIGRqc29uID0gZmV0Y2goJ2h0dHBzOi8vYXBpLmFsaXl1bmRyaXZlLmNvbS92Mi9maWxlL2dldF9zaGFyZV9saW5rX2Rvd25sb2FkX3VybCcsIHtcXG4gICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxcbiAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYWNjZXNzVGsoKSxcXG4gICAgICAgICAgICAnWC1TaGFyZS1Ub2tlbic6IHNoYXJldG9rZW5cXG4gICAgICAgIH0sXFxuICAgICAgICBib2R5OiBib2R5LFxcbiAgICAgICAgbWV0aG9kOiAnUE9TVCdcXG4gICAgfSk7XFxuICAgIHZhciBsaW5rID0gSlNPTi5wYXJzZShkanNvbikuZG93bmxvYWRfdXJsO1xcbiAgICBcXG4gICAgXFxuICAgIC8vbG9nKGxpbmspO1xcbiAgICB2YXIgcGxheSA9IEpTT04ucGFyc2UoZmV0Y2gobGluaywge1xcbiAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICdVc2VyLUFnZW50JzogTU9CSUxFX1VBLFxcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcXG4gICAgICAgICAgICAnUmVmZXJlcic6ICdodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vJ1xcbiAgICAgICAgfSxcXG4gICAgICAgIHJlZGlyZWN0OiBmYWxzZSxcXG4gICAgICAgIHdpdGhTdGF0dXNDb2RlOiB0cnVlXFxuICAgIH0pKS5oZWFkZXJzLmxvY2F0aW9uWzBdICsgKGNhdGUgPT0gJ3ZpZGVvJz8nO3tSZWZlcmVyQGh0dHBzOi8vd3d3LmFsaXl1bmRyaXZlLmNvbS99JzonI2lzTXVzaWM9dHJ1ZSM7e1JlZmVyZXJAaHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL30nKTtcXG59IGVsc2UgaWYgKGNhdGUgPT0gJ2ltYWdlJykge1xcbiAgICAvL+WkhOeQhuaWh+aho1xcbiAgICB2YXIganNvbiA9IGZldGNoKCdodHRwczovL2FwaS5hbGl5dW5kcml2ZS5jb20vdjIvZmlsZS9nZXRfc2hhcmVfbGlua19kb3dubG9hZF91cmwnLCB7XFxuICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcXG4gICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IGFjY2Vzc1RrKCksXFxuICAgICAgICAgICAgJ1gtU2hhcmUtVG9rZW4nOiBzaGFyZXRva2VuXFxuICAgICAgICB9LFxcbiAgICAgICAgYm9keTogJ3tcXFwic2hhcmVfaWRcXFwiOlxcXCInICsgc2hhcmVJZCArICdcXFwiLFxcXCJleHBpcmVfc2VjXFxcIjogNjAwLFxcXCJmaWxlX2lkXFxcIjpcXFwiJyArIGlucHV0ICsgJ1xcXCJ9JyxcXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnXFxuICAgIH0pO1xcblxcbiAgICAvL2xvZyhqc29uKTtcXG5cXG4gICAgdmFyIGxvY2xpbmsgPSBKU09OLnBhcnNlKGZldGNoKEpTT04ucGFyc2UoanNvbikudXJsLCB7XFxuICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBNT0JJTEVfVUEsXFxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxcbiAgICAgICAgICAgICdSZWZlcmVyJzogJ2h0dHBzOi8vd3d3LmFsaXl1bmRyaXZlLmNvbS8nXFxuICAgICAgICB9LFxcbiAgICAgICAgcmVkaXJlY3Q6IGZhbHNlLFxcbiAgICAgICAgd2l0aFN0YXR1c0NvZGU6IHRydWVcXG4gICAgfSkpLmhlYWRlcnMubG9jYXRpb25bMF07XFxuXFxuICAgIC8vbG9nKGxvY2xpbmspO1xcbiAgICBpZiAoY2F0ZSA9PSAnaW1hZ2UnKSB7XFxuICAgICAgICB2YXIgcGxheSA9ICdwaWNzOi8vJyArIGxvY2xpbmsgKyAnQFJlZmVyZXI9aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tLyc7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICB2YXIgcGxheSA9IGxvY2xpbmsgKyAnO3tSZWZlcmVyQGh0dHBzOi8vd3d3LmFsaXl1bmRyaXZlLmNvbS99JztcXG4gICAgfVxcbn0gZWxzZSB7XFxuICAgIHZhciBwbGF5ID0gJ3RvYXN0Oi8v6K+l5qC85byP5pqC5pyq5pSv5oyB77yM55uu5YmN5Y+q5pSv5oyB6Z+z6KeG6aKR5ZKM5Zu+54mH44CCJ1xcbn1cIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuaOqOmAgeS7o+eggVwiLFwicGF0aFwiOlwicHVzaGNvZGVcIixcInJ1bGVcIjpcImpzOlxcbi8v5o6o6YCB5Luj56CBXFxubGV0IHB1c2ggPSBKU09OLnN0cmluZ2lmeSh7XFxuICAgIC8vXFxcImhlYWRlcnNcXFwiOkpTT04uc3RyaW5naWZ5KHtcXFwiXFxcIjpcXFwiXFxcIn0pLFxcbiAgICBcXFwidXJsXFxcIjogdHVpc29uZy5qb2luKCcjJyksXFxuICAgIFxcXCJzaGFyZV9pZFxcXCI6IHNoYXJlSWQsXFxuICAgIFxcXCJyZWZyZXNoX3Rva2VuXFxcIjogcmVmdG9rZW5cXG59KS5yZXBsYWNlKC9cXFxcJi9nLCAn77yG77yGJyk7XFxuLy9sb2cocHVzaCk7XFxubGV0IHR2aXAgPSBnZXRJdGVtKCdoaWtlcnR2Ym94c2V0JywgJycpO1xcbi8vbG9nKHR1aXNvbmcubGVuZ3RoKTtcXG5pZih0dWlzb25nLmxlbmd0aD4wKXtcXG5pdGVtcy51bnNoaWZ0KHtcXG4gICAgdGl0bGU6IFxcXCLwn5O95o6o6YCB5b2T5YmN6aG16Z+z6KeG6aKR5YiwVFZCb3jwn5O6XFxcIixcXG4gICAgdXJsOiAkKHB1c2gpLmxhenlSdWxlKCh0dmlwKSA9PiB7XFxuICAgICAgICBpZiAoIXR2aXAuaW5jbHVkZXMoJzo5OTcnKSkge1xcbiAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly9JUOS4uuepuuaIluS4jeato+ehru+8jOivt+WFiOiuvue9ruOAgidcXG4gICAgICAgIH07XFxuICAgICAgICB2YXIgc3RhdGUgPSByZXF1ZXN0KHR2aXAgKyAnL2FjdGlvbicsIHtcXG4gICAgICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcXG4gICAgICAgICAgICAgICAgLy8nWC1SZXF1ZXN0ZWQtV2l0aCc6ICdYTUxIdHRwUmVxdWVzdCcsXFxuICAgICAgICAgICAgICAgICdSZWZlcmVyJzogdHZpcFxcbiAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgdGltZW91dDogMjAwMCxcXG4gICAgICAgICAgICBib2R5OiAnZG89cHVzaCZ1cmw9JyArIGlucHV0LFxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnXFxuICAgICAgICB9KTtcXG4gICAgICAgIGxvZyhzdGF0ZSk7XFxuICAgICAgICBpZiAoc3RhdGUgPT0gJ29rJykge1xcbiAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/mjqjpgIHmiJDlip/vvIzlpoLmnpx0dmJveOaYvuekuuKAnOayoeaJvuWIsOaVsOaNruKAneWPr+iDveaYr+W9k+WJjeeahGphcuS4jeaUr+aMgeOAgic7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/mjqjpgIHlpLHotKUnXFxuICAgICAgICB9XFxuICAgIH0sIHR2aXApLFxcbiAgICBjb2xfdHlwZTogXFxcInNjcm9sbF9idXR0b25cXFwiXFxufSk7XFxufVxcbi8vXCJ9XSIsImljb24iOiJodHRwczovL3d3dy5hbGlwYW5zb3UuY29tL2Zhdmljb24uaWNvIiwicHJveHkiOiIifQ==