海阔视界规则分享，当前分享的是：小程序￥home_rule_v2￥base64://@tvbox云盘推送@{"last_chapter_rule":"","title":"tvbox云盘推送","author":"tee&MrFly&小棉袄🌞&香雅情","url":"hiker://empty##fyclass","version":8,"col_type":"text_1","class_name":"全部&喵搜&小纸条&找资源&小站&UP云搜&盘基地登陆&云盘资源&网盘资源&JIKE&更多&云盘盘TG&懒狗TG&云盘发布TG&meow","type":"video","class_url":"all&https://www.alipansou.com&https://u.gitcafe.net/&https://zhaoziyuan.me/so&https://www.pan666.cn/&https://www.upyunso.com&https://www.panjd.com/&https://yunpan1.com/&https://aliwp.cn/&https://jike.info/category/2/讨论区?lang=en-US&https://dalao.ru/w/&https://tx.me/s/YunPanPan&https://tx.me/s/vip115hot&https://tx.me/s/shareAliyun&https://meow.tg","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\n\nlet random = 1;\n\nlet white = [\n    \"//tx.me/\",\n]\nlet d = [];\nlet r = fetch(\"hiker://home@云盘汇影\");\nif (!r || r.length <= 5) {\n    let ru = $.toString(() => {\n        return \"海阔视界规则分享，当前分享的是：小程序￥home_rule_v2￥base64://@云盘汇影@eyJsYXN0X2NoYXB0ZXJfcnVsZSI6IiIsInRpdGxlIjoi5LqR55uY5rGH5b2xIiwiYXV0aG9yIjoiTXJGbHkiLCJ1cmwiOiJoaWtlcjovL2VtcHR5JCQkZnlwYWdlIiwidmVyc2lvbiI6NiwiY29sX3R5cGUiOiJ0ZXh0XzEiLCJjbGFzc19uYW1lIjoiIiwidHlwZSI6ImFsbCIsImNsYXNzX3VybCI6IiIsImFyZWFfbmFtZSI6IiIsImFyZWFfdXJsIjoiIiwic29ydF9uYW1lIjoiIiwieWVhcl9uYW1lIjoiIiwic29ydF91cmwiOiIiLCJ5ZWFyX3VybCI6IiIsImZpbmRfcnVsZSI6ImpzOlxuZXZhbChmZXRjaCgnaGlrZXI6Ly9maWxlcy9ydWxlcy9pY3kvYWxpLmpzJykpO1xuYWxpLmhvbWVQYWdlKCk7Iiwic2VhcmNoX3VybCI6Imhpa2VyOi8vZW1wdHkkJCQqKiQkJGZ5cGFnZSQkJCIsImdyb3VwIjoi4pGg572R55uYIiwic2VhcmNoRmluZCI6ImpzOlxuZXZhbChmZXRjaCgnaGlrZXI6Ly9maWxlcy9ydWxlcy9pY3kvYWxpLmpzJykpO1xuYWxpLnNlYXJjaFBhZ2UodHJ1ZSk7XG4iLCJkZXRhaWxfY29sX3R5cGUiOiJtb3ZpZV8xIiwiZGV0YWlsX2ZpbmRfcnVsZSI6ImpzOlxuZXZhbChmZXRjaCgnaGlrZXI6Ly9maWxlcy9ydWxlcy9pY3kvYWxpLmpzJykpO1xuYWxpLmRldGFpbFBhZ2UoKTsiLCJzZGV0YWlsX2NvbF90eXBlIjoibW92aWVfMSIsInNkZXRhaWxfZmluZF9ydWxlIjoiIiwidWEiOiJtb2JpbGUiLCJwcmVSdWxlIjoidmFyIGFsaWpzID0gZmV0Y2goJ2h0dHBzOi8vZ2l0ZWUuY29tL2ZseTEzOTcvaGlrZXItaWN5L3Jhdy9tYXN0ZXIvYWxpLmpzJyk7XG5pZighYWxpanMgfHwgIWFsaWpzLmluY2x1ZGVzKCdhbGknKSl7XG5cdGFsaWpzID0gZmV0Y2goJ2h0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9naC9mbHkxMzk3L2hpa2VyLWljeS9hbGkuanMnKVxufVxuaWYoIWFsaWpzIHx8ICFhbGlqcy5pbmNsdWRlcygnYWxpJykpe1xuXHRhbGlqcyA9IGZldGNoKCdodHRwOi8vbGZpY3kuY29tOjMwMDAwL21yZmx5L2hpa2VyLWljeS9yYXcvbWFzdGVyL2FsaS5qcycpXG59XG5pZihhbGlqcykge1xuXHR3cml0ZUZpbGUoXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2ljeS9hbGkuanNcIixhbGlqcyk7XG5cdGV2YWwoYWxpanMpO1xuXHRhbGkucHJlUnVsZSgpO1xufVxuIiwicGFnZXMiOiJbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIue9keebmOivpuaDhVwiLFwicGF0aFwiOlwiZGV0YWlsXCIsXCJydWxlXCI6XCJqczpcXG5ldmFsKGZldGNoKCdoaWtlcjovL2ZpbGVzL3J1bGVzL2ljeS9hbGkuanMnKSk7XFxuYWxpLmluaXRDb25maWcoKTtcXG5hbGkuYWxpUnVsZSgpO1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfMV9sZWZ0X3BpY1wiLFwibmFtZVwiOlwi6LWE5rqQ572R6aG16K+m5oOFXCIsXCJwYXRoXCI6XCJzaXRlLWRldGFpbFwiLFwicnVsZVwiOlwianM6XFxuZXZhbChmZXRjaCgnaGlrZXI6Ly9maWxlcy9ydWxlcy9pY3kvYWxpLmpzJykpO1xcbmFsaS5kZXRhaWxQYWdlKCk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLkuKrkurrnvZHnm5jor6bmg4VcIixcInBhdGhcIjpcImRyaXZlXCIsXCJydWxlXCI6XCJqczpcXG5ldmFsKGZldGNoKCdoaWtlcjovL2ZpbGVzL3J1bGVzL2ljeS9hbGkuanMnKSk7XFxuYWxpLmluaXRDb25maWcoKTtcXG5hbGkubXlBbGlSdWxlKCk7XCJ9XSIsImljb24iOiJodHRwczovL2dpdGVlLmNvbS9mbHkxMzk3L2hpa2VyLWljeS9yYXcvbWFzdGVyL2FsaXl1bi5wbmcifQ==\"\n    });\n    confirm({\n        title: MY_RULE.title + '提示',\n        content: '本规则依赖云盘汇影规则，点击下面的确定按钮导入',\n        confirm: ru,\n        cancel: ru\n    })\n}\nlet u = MY_URL.split(\"##\")[1];\n\nfunction loadUrl(u) {\n    let desc = \"auto\";\n    for (let it of white) {\n        if (u.includes(it)) {\n            desc = \"100%&&float\";\n        }\n    }\n    if (getAppVersion() >= 3018) {\n        desc = \"float&&top\";\n    }\n    setResult([{\n        col_type: \"x5_webview_single\",\n        url: u,\n        desc: desc,\n        extra: {\n            canBack: true,\n            urlInterceptor: $.toString((myrule) => {\n                if (input.startsWith('https://www.aliyundrive.com/s/') || input.startsWith('magnet:')) {\n                    //fba.fetch(input, {});\n                    clearMyVar('name');\n                    return $.toString((url, myrule) => {\n                        fba.open(JSON.stringify({\n                            rule: myrule,\n                            url: 'hiker://page/push?rule=' + myrule + '&url=hiker://empty##' + encodeURIComponent(url)+'???fypage'\n                        }));\n                    }, input, myrule)\n                }\n            }, MY_RULE.title),\n            ua: MOBILE_UA\n        }\n    }])\n}\nif (u == \"all\") {\n    let cls = getMyVar(\"cls\", \"\");\n    if (cls) {\n        u = cls;\n        loadUrl(u);\n        clearMyVar(\"cls\");\n    } else {\n        let r = JSON.parse(fetch(\"hiker://home@\" + MY_RULE.title));\n        let cn = r.class_name.split(\"&\");\n        let cu = r.class_url.split(\"&\");\n        let arr = [];\n        arr.push({\n            title: \"推送\",\n            url: $.toString(() => {\n                clearMyVar('name');\n                var link = 'hiker://page/push?url=hiker://empty##' + encodeURIComponent(input.replace(\"#isMusic=true#\", '').replace('#isVideo=true#', ''))+'???fypage';\n                if (input.startsWith('http') || input.startsWith('magnet:') || input.includes(\"\\n\")) {\n                    return link;\n                } else if (input.startsWith(\"{\") && input.endsWith(\"}\")) {\n                    return link;\n                } else if (/\\.torrent|ed2k\\:/.test(input)) {\n                    return 'toast://不支持推送这种链接。'\n                } else {\n                    return 'toast://请输入正确的链接。'\n                }\n            }),\n            extra: {\n                titleVisible: true\n            },\n            col_type: 'input'\n        });\n        arr.push({\n            title: \"TVB搜索\",\n            url: $.toString(() => {\n                let tvip = getItem('hikertvboxset', '');\n                let state = 'false';\n                if (tvip != '' && tvip.includes(':997')) {\n                    var state = request(tvip + '/action', {\n                        headers: {\n                            'Content-Type': 'application/x-www-form-urlencoded',\n                            //'X-Requested-With': 'XMLHttpRequest',\n                            'Referer': tvip\n                        },\n                        timeout: 2000,\n                        body: 'do=search&word=' + input,\n                        method: 'POST'\n                    });\n                }\n                log(state);\n                if (state == 'ok') {\n                    return 'toast://搜索推送成功，请注意观看电视端tvbox界面';\n                } else {\n                    return 'toast://搜索推送失败'\n                }\n            }),\n            extra: {\n                titleVisible: true\n            },\n            col_type: 'input'\n        });\n        arr.unshift({\n            title: getItem('hikertvboxset', ''),\n            url: 'hiker://empty',\n            col_type: 'scroll_button'\n        });\n        arr.unshift({\n            title: '设置IP地址',\n            url: \"input://\" + getItem('hikertvboxset', 'http://' + getIP() + ':9978') + \"////请输入tvbox推送IP地址，如http://\" + getIP() + \":9978.js:setItem('hikertvboxset',input);refreshPage()\",\n            col_type: 'scroll_button'\n        });\n        \n        for (let i = 1; i < cn.length; i++) {\n            arr.push({\n                title: cn[i],\n                url: $().lazyRule((u) => {\n                    putMyVar(\"cls\", u);\n                    //refreshX5Desc(\"top&&float\");\n                    refreshPage();\n                    return \"hiker://empty\";\n                }, cu[i]),\n                col_type: \"text_2\",\n                desc: \"\",\n                pic_url: \"\"\n            });\n        }\n        refreshX5Desc(\"0&&float\");\n        setResult(arr);\n    }\n} else {\n    loadUrl(u);\n}","search_url":"","group":"⑦工具","searchFind":"","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"\nif (!getMyVar(\"aliaccessTk\")) {\n    let ntoken=[];\n    if (!fileExist(\"hiker://files/rules/icy/icy-ali-token.json\")) {\n        var reftoken = \"\";\n    } else {\n        var reftoken = JSON.parse(fetch('hiker://files/rules/icy/icy-ali-token.json', {}))[0].refresh_token;\n    }\n    var refresh = fetch('https://auth.aliyundrive.com/v2/account/token', {\n        headers: {\n            'Content-Type': 'application/json',\n            'User-Agent': PC_UA,\n            'Referer': 'https://www.aliyundrive.com/'\n        },\n        body: '{\"refresh_token\":\"' + reftoken + '\",\"grant_type\":\"refresh_token\"}',\n        method: 'POST'\n    });\n    //log(refresh);\n    if (!fileExist(\"hiker://files/rules/icy/icy-ali-token.json\") || refresh.length > 300) {\n        ntoken.push(JSON.parse(refresh));\n        writeFile(\"hiker://files/rules/icy/icy-ali-token.json\", JSON.stringify(ntoken));\n    }\n    \n    var refresh = fetch('hiker://files/rules/icy/icy-ali-token.json', {});\n    var accessTk = JSON.parse(refresh)[0].token_type + ' ' + JSON.parse(refresh)[0].access_token;\n    putMyVar(\"aliaccessTk\", accessTk);\n}\n\n\n","pages":"[{\"col_type\":\"movie_3\",\"name\":\"推送\",\"path\":\"push\",\"rule\":\"js:\\n//log(MY_URL);\\nvar items = [];\\nvar realurl = MY_URL.split('##')[1].split('???')[0];\\nvar tvip = getItem('hikertvboxset', '');\\nvar cltext = getMyVar(\\\"name\\\", realurl);\\n//log(realurl);\\nitems.push({\\n    title: decodeURIComponent(cltext),\\n    url: \\\"input://\\\" + JSON.stringify({\\n        value: \\\"\\\",\\n        hint: \\\"请输入tvbox推送内容\\\",\\n        js: $.toString(() => {\\n            clearMyVar('name');\\n            var num = encodeURIComponent(input);\\n            if (num == '') {\\n                return 'toast://输入的值是空的。';\\n            } else {\\n                putMyVar('name', num);\\n                return refreshPage(true);\\n            }\\n        }),\\n    }),\\n    col_type: 'icon_1_search'\\n});\\n\\nif (getMyVar('name', '') != '') {\\n    realurl = getMyVar('name');\\n}\\n//log(\\\"实际\\\"+realurl);\\nif (tvip.includes('http')) {\\n    items.push({\\n        title: \\\"📽 推送到TVBox 📺\\\",\\n        url: $(realurl).lazyRule((tvip) => {\\n            clearMyVar('name');\\n            input = decodeURIComponent(input);\\n            var purl = input.split(\\\";\\\")[0];\\n            if (purl.includes(\\\"\\\\n\\\")) {\\n                purl = purl.replace(\\\"\\\\n\\\", '$');\\n            }\\n            var head = input.split(\\\";\\\")[1];\\n            if (input.startsWith(\\\"{\\\") && input.endsWith(\\\"}\\\")) {\\n\\n                purl = input.replace(/\\\\&/g, '＆＆');\\n                //log(purl);\\n            } else if (head != undefined) {\\n                var head = input.split(\\\";{\\\")[1].split(\\\"}\\\")[0].split(\\\"&&\\\");\\n                var purl = input.split(\\\";{\\\")[0].replace(/\\\\&/g, '＆＆');\\n\\n                var aaa = \\\"\\\";\\n                for (let i = 0; i < head.length; i++) {\\n                    let key = head[i].split(\\\"@\\\")[0];\\n                    let val = head[i].split(\\\"@\\\")[1].replace(/\\\\；\\\\；/g, ';');\\n                    let vvv = key + \\\"=\\\" + encodeURIComponent(val);\\n                    if (i < 1) {\\n                        aaa = vvv;\\n                    } else {\\n                        aaa += \\\"&\\\" + vvv\\n                    }\\n                }\\n                purl = purl + \\\"|\\\" + aaa;\\n            } else {\\n                purl = purl.replace(/\\\\&/g, '＆＆')\\n\\n            }\\n            //log(purl);\\n            //log(tvip);\\n            if (input.startsWith('https://www.aliyundrive.com/s/')) {\\n                let reftoken = JSON.parse(fetch('hiker://files/rules/icy/icy-ali-token.json', {}))[0].refresh_token;\\n                purl = JSON.stringify({\\n                    \\\"url\\\": input,\\n                    \\\"refresh_token\\\": reftoken\\n                })\\n            }\\n\\n            var state = request(tvip + '/action', {\\n                headers: {\\n                    'Content-Type': 'application/x-www-form-urlencoded',\\n                    //'X-Requested-With': 'XMLHttpRequest',\\n                    'Referer': tvip\\n                },\\n                timeout: 2000,\\n                body: 'do=push&url=' + purl,\\n                method: 'POST'\\n            });\\n            log(state);\\n            if (state == 'ok') {\\n                return 'toast://推送成功，如果tvbox显示“没找到数据”可能是该链接需要密码或者当前的jar不支持。';\\n            } else {\\n                return 'toast://推送失败'\\n            }\\n        }, tvip),\\n        col_type: \\\"text_center_1\\\",\\n        desc: \\\"\\\",\\n        pic_url: \\\"\\\"\\n    });\\n} else {\\n    items.push({\\n        title: '推送失败，IP地址设置不正确。',\\n        col_type: 'text_center_1'\\n    });\\n}\\nif (decodeURIComponent(realurl).includes('www.aliyundrive') && !realurl.includes('%3B%7B')) {\\n    eval(JSON.parse(fetch('hiker://page/sharid', {})).rule)\\n}\\nsetResult(items);\"},{\"col_type\":\"movie_3\",\"name\":\"分享资源一级\",\"path\":\"sharid\",\"rule\":\"js:\\n//var items = [];\\nfunction formatDate(_date, _fmt) {\\n    let fmt = _fmt || \\\"yyyy-MM-dd HH:mm:ss\\\";\\n    const date = !isNaN(_date) ? new Date(_date * 1000) : new Date(_date);\\n    const o = {\\n        \\\"M+\\\": date.getMonth() + 1, //月份 \\n        \\\"d+\\\": date.getDate(), //日 \\n        \\\"h+\\\": date.getHours() % 12 == 0 ? 12 : date.getHours() % 12,\\n        \\\"H+\\\": date.getHours(), //小时 \\n        \\\"m+\\\": date.getMinutes(), //分 \\n        \\\"s+\\\": date.getSeconds(), //秒 \\n        \\\"q+\\\": Math.floor((date.getMonth() + 3) / 3), //季度 \\n        \\\"S\\\": date.getMilliseconds() //毫秒 \\n    };\\n    if (/(y+)/.test(fmt)) {\\n        fmt = fmt.replace(RegExp.$1, (date.getFullYear() + \\\"\\\").substr(4 - RegExp.$1.length));\\n    }\\n    for (let k in o) {\\n        if (new RegExp(\\\"(\\\" + k + \\\")\\\").test(fmt)) {\\n            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((\\\"00\\\" + o[k]).substr((\\\"\\\" + o[k]).length)));\\n        }\\n    }\\n    return fmt;\\n};\\n\\nfunction formatSize(size) {\\n    if (!size) {\\n        return '';\\n    }\\n    const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\\n    let i = 0;\\n    while (size >= 1024) {\\n        size /= 1024;\\n        i++;\\n    }\\n    size = i ? Number(size.toFixed(2)) : size;\\n    return `${size} ${units[i]}`;\\n}\\n//log(realurl);\\ntry {\\n    //var reftoken = JSON.parse(fetch('hiker://files/rules/xyq/alitoken.json', {})).refresh_token;\\n    var reftoken = JSON.parse(fetch('hiker://files/rules/icy/icy-ali-token.json', {}))[0].refresh_token;\\n    var shareId = decodeURIComponent(realurl).split('com/s/')[1].substring(0, 11);\\n    let pushname = JSON.parse(fetch('https://api.aliyundrive.com/adrive/v3/share_link/get_share_by_anonymous', {\\n        headers: {\\n            'Content-Type': 'application/json'\\n        },\\n        body: '{\\\"share_id\\\":\\\"' + shareId + '\\\"}',\\n        method: 'POST'\\n    })).share_name;\\n    var sharetoken = JSON.parse(fetch('https://api.aliyundrive.com/v2/share_link/get_share_token', {\\n        headers: {\\n            'Content-Type': 'application/json'\\n        },\\n        body: '{\\\"share_pwd\\\":\\\"\\\",\\\"share_id\\\":\\\"' + shareId + '\\\"}',\\n        method: 'POST'\\n    })).share_token;\\n    //log(sharetoken);\\n    if (MY_PAGE == 1) {\\n        clearMyVar('nextpage');\\n    }\\n    let next = getMyVar('nextpage', '') != '' ? ',\\\"marker\\\":\\\"' + getMyVar('nextpage') + '\\\"' : '';\\n    if (!decodeURIComponent(realurl).includes('/folder/')) {\\n        var rescod = fetch('https://api.aliyundrive.com/adrive/v3/file/list', {\\n            headers: {\\n                'Content-Type': 'application/json',\\n                'X-Share-Token': sharetoken\\n            },\\n            body: '{\\\"share_id\\\":\\\"' + shareId + '\\\",\\\"parent_file_id\\\":\\\"root\\\",\\\"limit\\\":100,\\\"image_thumbnail_process\\\":\\\"image/resize,w_160/format,jpeg\\\",\\\"image_url_process\\\":\\\"image/resize,w_1920/format,jpeg\\\",\\\"video_thumbnail_process\\\":\\\"video/snapshot,t_1000,f_jpg,ar_auto,w_300\\\",\\\"order_by\\\":\\\"name\\\",\\\"order_direction\\\":\\\"ASC\\\"' + next + '}',\\n            method: 'POST'\\n        });\\n        //log(rescod);\\n        var listyp = JSON.parse(rescod).items[0].type;\\n        var pfileid = JSON.parse(rescod).items[0].file_id;\\n    } else {\\n        var listyp = 'folder';\\n        var pfileid = decodeURIComponent(realurl).split('folder/')[1]\\n\\n    }\\n    //log(html);\\n    if (listyp == 'folder') {\\n        var rescod = fetch('https://api.aliyundrive.com/adrive/v3/file/list', {\\n            headers: {\\n                'Content-Type': 'application/json',\\n                'X-Share-Token': sharetoken\\n            },\\n            body: '{\\\"share_id\\\":\\\"' + shareId + '\\\",\\\"parent_file_id\\\":\\\"' + pfileid + '\\\",\\\"limit\\\":100,\\\"image_thumbnail_process\\\":\\\"image/resize,w_160/format,jpeg\\\",\\\"image_url_process\\\":\\\"image\\\\/resize,w_1920/format,jpeg\\\",\\\"video_thumbnail_process\\\":\\\"video/snapshot,t_1000,f_jpg,ar_auto,w_300\\\",\\\"order_by\\\":\\\"name\\\",\\\"order_direction\\\":\\\"ASC\\\"' + next + '}',\\n            method: 'POST'\\n        });\\n\\n    } //取文件夹\\n    //log(rescod);\\n\\n    if (JSON.parse(rescod).next_marker) {\\n        let marker = JSON.parse(rescod).next_marker;\\n        if (marker.length > 10) {\\n            putMyVar('nextpage', marker);\\n        } else {\\n            clearMyVar('nextpage');\\n        }\\n    }\\n    var conts = JSON.parse(rescod).items;\\n    var dongtai = JSON.parse(fetch('hiker://page/lazyurl', {})).rule.toString();\\n    var tuisong = [];\\n    for (var i in conts) {\\n        var listyp = conts[i].type;\\n        if (listyp != 'folder') {\\n            var cate = conts[i].category;\\n            var fname = conts[i].name;\\n            if (cate == 'video') {\\n                var title = '📺' + conts[i].name;\\n            } else if (cate == 'doc') {\\n                var title = '📖' + conts[i].name;\\n            } else if (cate == 'image') {\\n                var title = '🖼' + conts[i].name;\\n            } else if (cate == 'zip') {\\n                var title = '📦' + conts[i].name;\\n            } else {\\n                var title = conts[i].name\\n            }\\n            items.push({\\n                title: title,\\n                url: $(conts[i].file_id).lazyRule((shareId, sharetoken, dongtai, cate, fname) => {\\n                    eval(dongtai);\\n                    return play\\n                }, shareId, sharetoken, dongtai, cate, fname),\\n                desc: formatDate(conts[i].updated_at) + '  ' + formatSize(conts[i].size),\\n                col_type: 'text_1'\\n\\n            });\\n            if (cate == 'video' || cate == 'audio') {\\n                tuisong.push(\\n                    title.replace(/\\\\#/g, '_').replace(/\\\\$/g, '_') + '$' + cate + '|' + conts[i].file_id\\n                );\\n            }\\n        } else {\\n            items.push({\\n                title: '📂' + conts[i].name,\\n                url: $('hiker://empty' + conts[i].file_id + '???fypage').rule((shareId, sharetoken, pushname) => {\\n                    eval(JSON.parse(fetch('hiker://page/ruleloop', {})).rule);\\n                }, shareId, sharetoken, conts[i].name),\\n                col_type: 'flex_button'\\n            });\\n\\n        } //end if\\n    } //end for i\\n    //log(tuisong);\\n    //let pushname = JSON.parse(rescod).items[0].name;\\n    eval(JSON.parse(fetch('hiker://page/pushcode', {})).rule);\\n} catch (e) {\\n    items.push({\\n        title: '欧欧，报错了。',\\n        url: decodeURIComponent(getResCode().split('##')[1]),\\n        col_type: 'text_center_1'\\n    });\\n}\\n/*\\nsetHomeResult({\\n    data: items\\n});\\n*/\"},{\"col_type\":\"movie_3\",\"name\":\"分享资源嵌套\",\"path\":\"ruleloop\",\"rule\":\"var items = [];\\n\\nfunction formatDate(_date, _fmt) {\\n    let fmt = _fmt || \\\"yyyy-MM-dd HH:mm:ss\\\";\\n    const date = !isNaN(_date) ? new Date(_date * 1000) : new Date(_date);\\n    const o = {\\n        \\\"M+\\\": date.getMonth() + 1, //月份 \\n        \\\"d+\\\": date.getDate(), //日 \\n        \\\"h+\\\": date.getHours() % 12 == 0 ? 12 : date.getHours() % 12,\\n        \\\"H+\\\": date.getHours(), //小时 \\n        \\\"m+\\\": date.getMinutes(), //分 \\n        \\\"s+\\\": date.getSeconds(), //秒 \\n        \\\"q+\\\": Math.floor((date.getMonth() + 3) / 3), //季度 \\n        \\\"S\\\": date.getMilliseconds() //毫秒 \\n    };\\n    if (/(y+)/.test(fmt)) {\\n        fmt = fmt.replace(RegExp.$1, (date.getFullYear() + \\\"\\\").substr(4 - RegExp.$1.length));\\n    }\\n    for (let k in o) {\\n        if (new RegExp(\\\"(\\\" + k + \\\")\\\").test(fmt)) {\\n            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((\\\"00\\\" + o[k]).substr((\\\"\\\" + o[k]).length)));\\n        }\\n    }\\n    return fmt;\\n};\\n\\nfunction formatSize(size) {\\n    if (!size) {\\n        return '';\\n    }\\n    const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\\n    let i = 0;\\n    while (size >= 1024) {\\n        size /= 1024;\\n        i++;\\n    }\\n    size = i ? Number(size.toFixed(2)) : size;\\n    return `${size} ${units[i]}`;\\n}\\nlet tvip = getItem('hikertvboxset', '');\\n\\nlet reftoken = JSON.parse(fetch('hiker://files/rules/icy/icy-ali-token.json', {}))[0].refresh_token;\\n            \\n//log(getResCode());\\nif (MY_PAGE == 1) {\\n    clearMyVar('nextpage');\\n    items.unshift({\\n        title: \\\"📽推送当前文件夹📺\\\",\\n        url: $('https://www.aliyundrive.com/s/' + shareId + '/folder/' + getResCode().split('???')[0]).lazyRule((tvip) => {\\n            if (!tvip.includes(':997')) {\\n                return 'toast://IP为空或不正确，请先设置。'\\n            };\\n            let reftoken = JSON.parse(fetch('hiker://files/rules/icy/icy-ali-token.json', {}))[0].refresh_token;\\n            let purl = JSON.stringify({\\n                \\\"url\\\": input,\\n                \\\"refresh_token\\\": reftoken\\n            });\\n            var state = request(tvip + '/action', {\\n                headers: {\\n                    'Content-Type': 'application/x-www-form-urlencoded',\\n                    //'X-Requested-With': 'XMLHttpRequest',\\n                    'Referer': tvip\\n                },\\n                timeout: 2000,\\n                body: 'do=push&url=' + purl,\\n                method: 'POST'\\n            });\\n            log(state);\\n            if (state == 'ok') {\\n                return 'toast://推送成功，如果tvbox显示“没找到数据”可能是当前的jar不支持。';\\n            } else {\\n                return 'toast://推送失败'\\n            }\\n        }, tvip),\\n        col_type: \\\"scroll_button\\\"\\n    });\\n}\\nlet next = getMyVar('nextpage', '') != '' ? ',\\\"marker\\\":\\\"' + getMyVar('nextpage') + '\\\"' : '';\\n\\nvar rescod = fetch('https://api.aliyundrive.com/adrive/v3/file/list', {\\n    headers: {\\n        'Content-Type': 'application/json',\\n        'X-Share-Token': sharetoken\\n    },\\n    body: '{\\\"share_id\\\":\\\"' + shareId + '\\\",\\\"parent_file_id\\\":\\\"' + getResCode().split('???')[0] + '\\\",\\\"limit\\\":100,\\\"image_thumbnail_process\\\":\\\"image/resize,w_160/format,jpeg\\\",\\\"image_url_process\\\":\\\"image\\\\/resize,w_1920/format,jpeg\\\",\\\"video_thumbnail_process\\\":\\\"video/snapshot,t_1000,f_jpg,ar_auto,w_300\\\",\\\"order_by\\\":\\\"name\\\",\\\"order_direction\\\":\\\"ASC\\\"' + next + '}',\\n    method: 'POST'\\n});\\n//log(rescod);\\nif (JSON.parse(rescod).next_marker) {\\n    let marker = JSON.parse(rescod).next_marker;\\n    if (marker.length > 10) {\\n        putMyVar('nextpage', marker);\\n    } else {\\n        clearMyVar('nextpage');\\n    }\\n}\\nvar conts = JSON.parse(rescod).items;\\nvar dongtai = JSON.parse(fetch('hiker://page/lazyurl', {})).rule.toString();\\nvar tuisong = [];\\nfor (var i in conts) {\\n\\n    var listyp = conts[i].type;\\n    if (listyp != 'folder') {\\n        var cate = conts[i].category;\\n        var fname = conts[i].name;\\n        if (cate == 'video') {\\n            var title = '📺' + conts[i].name;\\n        } else if (cate == 'doc') {\\n            var title = '📖' + conts[i].name;\\n        } else if (cate == 'image') {\\n            var title = '🖼' + conts[i].name;\\n        } else if (cate == 'zip') {\\n            var title = '📦' + conts[i].name;\\n        } else {\\n            var title = conts[i].name\\n        }\\n        items.push({\\n            title: title,\\n            url: $(conts[i].file_id).lazyRule((shareId, sharetoken, dongtai, cate, fname) => {\\n                eval(dongtai);\\n                return play\\n            }, shareId, sharetoken, dongtai, cate, fname),\\n            desc: formatDate(conts[i].updated_at) + '  ' + formatSize(conts[i].size),\\n            col_type: 'text_1'\\n\\n        });\\n        if (cate == 'video' || cate == 'audio') {\\n            tuisong.push(\\n                title.replace(/\\\\#/g, '_').replace(/\\\\$/g, '_') + '$' + cate + '|' + conts[i].file_id\\n            );\\n        }\\n    } else {\\n        items.push({\\n            title: '📂' + conts[i].name,\\n            url: $('hiker://empty' + conts[i].file_id + '???fypage').rule((shareId, sharetoken, pushname) => {\\n                eval(JSON.parse(fetch('hiker://page/ruleloop', {})).rule);\\n            }, shareId, sharetoken, conts[i].name),\\n            col_type: 'flex_button'\\n        });\\n\\n    } //end if\\n\\n\\n}\\neval(JSON.parse(fetch('hiker://page/pushcode', {})).rule);\\nsetHomeResult({\\n    data: items\\n});\"},{\"col_type\":\"movie_3\",\"name\":\"分享资源动态解析\",\"path\":\"lazyurl\",\"rule\":\"function accessTk() {\\n    let ntoken = [];\\n    //let reftoken = request('http://home.jundie.top:81/jar/token666.txt', {});\\n    //var reftoken = JSON.parse(fetch('hiker://files/rules/xyq/alitoken.json', {})).refresh_token;\\n    var reftoken = JSON.parse(fetch('hiker://files/rules/icy/icy-ali-token.json', {}))[0].refresh_token;\\n    let accessTk = \\\"\\\";\\n    let refresh = fetch('https://auth.aliyundrive.com/v2/account/token', {\\n        headers: {\\n            'Content-Type': 'application/json',\\n            'Referer': 'https://www.aliyundrive.com/'\\n        },\\n        body: '{\\\"refresh_token\\\":\\\"' + reftoken + '\\\",\\\"grant_type\\\":\\\"refresh_token\\\"}',\\n        method: 'POST'\\n    });\\n    ntoken.push(JSON.parse(refresh));\\n    if (!fileExist(\\\"hiker://files/rules/icy/icy-ali-token.json\\\") || refresh.length > 300) {\\n        writeFile(\\\"hiker://files/rules/icy/icy-ali-token.json\\\", JSON.stringify(ntoken));\\n    }\\n    accessTk = JSON.parse(refresh).token_type + ' ' + JSON.parse(refresh).access_token;\\n    putMyVar(\\\"aliaccessTk\\\", accessTk);\\n    return accessTk\\n    //putVar(\\\"aliaccessTk\\\", accessTk);\\n}\\n\\nif (cate == 'video'||cate == 'audio') {\\n    //处理视频  \\n    var dsid = shareId;\\n    var dfid = input;\\n    if(cate == 'video'){\\n    var json = fetch('https://api.aliyundrive.com/v2/file/get_share_link_video_preview_play_info', {\\n        headers: {\\n            'Content-Type': 'application/json',\\n            'Authorization': accessTk(),\\n            'X-Share-Token': sharetoken\\n        },\\n        body: '{\\\"share_id\\\":\\\"' + shareId + '\\\",\\\"category\\\":\\\"live_transcoding\\\",\\\"file_id\\\":\\\"' + input + '\\\",\\\"template_id\\\":\\\"\\\"}',\\n        method: 'POST'\\n    });\\n    //log(json);\\n    \\n    var dsid = JSON.parse(json).share_id;\\n    var dfid = JSON.parse(json).file_id;\\n    }\\n    if(cate == 'video'){\\n       var body='{\\\"expire_sec\\\":600,\\\"file_id\\\":\\\"' + dfid + '\\\",\\\"share_id\\\":\\\"' + dsid + '\\\"}';\\n        \\n    }else{\\n      var body='{\\\"file_id\\\":\\\"' + dfid + '\\\",\\\"get_audio_play_info\\\":true,\\\"share_id\\\":\\\"' + dsid + '\\\"}';   \\n    }\\n    var djson = fetch('https://api.aliyundrive.com/v2/file/get_share_link_download_url', {\\n        headers: {\\n            'Content-Type': 'application/json',\\n            'Authorization': accessTk(),\\n            'X-Share-Token': sharetoken\\n        },\\n        body: body,\\n        method: 'POST'\\n    });\\n    var link = JSON.parse(djson).download_url;\\n    \\n    \\n    //log(link);\\n    var play = JSON.parse(fetch(link, {\\n        headers: {\\n            'User-Agent': MOBILE_UA,\\n            'Content-Type': 'application/x-www-form-urlencoded',\\n            'Referer': 'https://www.aliyundrive.com/'\\n        },\\n        redirect: false,\\n        withStatusCode: true\\n    })).headers.location[0] + (cate == 'video'?';{Referer@https://www.aliyundrive.com/}':'#isMusic=true#;{Referer@https://www.aliyundrive.com/}');\\n} else if (cate == 'image') {\\n    //处理文档\\n    var json = fetch('https://api.aliyundrive.com/v2/file/get_share_link_download_url', {\\n        headers: {\\n            'Content-Type': 'application/json',\\n            'Authorization': accessTk(),\\n            'X-Share-Token': sharetoken\\n        },\\n        body: '{\\\"share_id\\\":\\\"' + shareId + '\\\",\\\"expire_sec\\\": 600,\\\"file_id\\\":\\\"' + input + '\\\"}',\\n        method: 'POST'\\n    });\\n\\n    //log(json);\\n\\n    var loclink = JSON.parse(fetch(JSON.parse(json).url, {\\n        headers: {\\n            'User-Agent': MOBILE_UA,\\n            'Content-Type': 'application/x-www-form-urlencoded',\\n            'Referer': 'https://www.aliyundrive.com/'\\n        },\\n        redirect: false,\\n        withStatusCode: true\\n    })).headers.location[0];\\n\\n    //log(loclink);\\n    if (cate == 'image') {\\n        var play = 'pics://' + loclink + '@Referer=https://www.aliyundrive.com/';\\n    } else {\\n        var play = loclink + ';{Referer@https://www.aliyundrive.com/}';\\n    }\\n} else {\\n    var play = 'toast://该格式暂未支持，目前只支持音视频和图片。'\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"推送代码\",\"path\":\"pushcode\",\"rule\":\"js:\\n//推送代码\\nlet push = JSON.stringify({\\n    \\\"name\\\":pushname,\\n    \\\"url\\\": tuisong.join('#'),\\n    \\\"share_id\\\": shareId,\\n    \\\"refresh_token\\\": reftoken\\n}).replace(/\\\\&/g, '＆＆');\\n//log(push);\\n//let tvip = getItem('hikertvboxset', '');\\n//log(tuisong.length);\\nif(tuisong.length>0){\\nitems.unshift({\\n    title: \\\"📽推送当前页音视频📺\\\",\\n    url: $(push).lazyRule((tvip) => {\\n        if (!tvip.includes(':997')) {\\n            return 'toast://IP为空或不正确，请先设置。'\\n        };\\n        var state = request(tvip + '/action', {\\n            headers: {\\n                'Content-Type': 'application/x-www-form-urlencoded',\\n                //'X-Requested-With': 'XMLHttpRequest',\\n                'Referer': tvip\\n            },\\n            timeout: 2000,\\n            body: 'do=push&url=' + input,\\n            method: 'POST'\\n        });\\n        log(state);\\n        if (state == 'ok') {\\n            return 'toast://推送成功，如果tvbox显示“没找到数据”可能是当前的jar不支持。';\\n        } else {\\n            return 'toast://推送失败'\\n        }\\n    }, tvip),\\n    col_type: \\\"scroll_button\\\"\\n});\\n}\\n//\"}]","icon":"https://www.alipansou.com/favicon.ico","proxy":""}