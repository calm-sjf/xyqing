海阔视界规则分享，当前分享的是：小程序￥home_rule_v2￥base64://@MY阿里云盘@{"last_chapter_rule":"","title":"MY阿里云盘","author":"香雅情","url":"hiker://empty","version":0,"col_type":"movie_3","class_name":"","type":"tool","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nvar d = [];\n\nfunction formatDate(_date, _fmt) {\n    let fmt = _fmt || \"yyyy-MM-dd HH:mm:ss\";\n    const date = !isNaN(_date) ? new Date(_date * 1000) : new Date(_date);\n    const o = {\n        \"M+\": date.getMonth() + 1, //月份 \n        \"d+\": date.getDate(), //日 \n        \"h+\": date.getHours() % 12 == 0 ? 12 : date.getHours() % 12,\n        \"H+\": date.getHours(), //小时 \n        \"m+\": date.getMinutes(), //分 \n        \"s+\": date.getSeconds(), //秒 \n        \"q+\": Math.floor((date.getMonth() + 3) / 3), //季度 \n        \"S\": date.getMilliseconds() //毫秒 \n    };\n    if (/(y+)/.test(fmt)) {\n        fmt = fmt.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n    }\n    for (let k in o) {\n        if (new RegExp(\"(\" + k + \")\").test(fmt)) {\n            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((\"00\" + o[k]).substr((\"\" + o[k]).length)));\n        }\n    }\n    return fmt;\n};\n\nfunction formatSize(size) {\n    if (!size) {\n        return '';\n    }\n    const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    let i = 0;\n    while (size >= 1024) {\n        size /= 1024;\n        i++;\n    }\n    size = i ? Number(size.toFixed(2)) : size;\n    return `${size} ${units[i]}`;\n}\n//////\nvar tokenjson = JSON.parse(fetch('hiker://files/rules/icy/icy-ali-token.json', {}))[0];\nvar drivid = tokenjson.default_drive_id;\nd.push({\n    title: '当前用户：' + tokenjson.nick_name + ' ' + tokenjson.user_name,\n    url: 'hiker://empty',\n    col_type: \"avatar\",\n    pic_url: tokenjson.avatar\n});\n\nvar selfroot = fetch('https://api.aliyundrive.com/adrive/v3/file/list', {\n    headers: {\n        'Content-Type': 'application/json',\n        'authorization': getMyVar(\"aliaccessTk\", \"\")\n    },\n    body: '{\"drive_id\":\"' + drivid + '\",\"parent_file_id\":\"root\",\"limit\":100,\"all\":false,\"url_expire_sec\":1600,\"image_thumbnail_process\":\"image/resize,w_400/format,jpeg\",\"image_url_process\":\"image/resize,w_1920/format,jpeg\",\"video_thumbnail_process\":\"video/snapshot,t_1000,f_jpg,ar_auto,w_300\",\"fields\":\"*\",\"order_by\":\"name\",\"order_direction\":\"ASC\"}',\n    method: 'POST'\n});\n\nvar conts = JSON.parse(selfroot).items;\nvar dongtai = JSON.parse(fetch('hiker://page/selflazyurl', {})).rule.toString();\nvar tuisong = [];\nfor (var i in conts) {\n    var listyp = conts[i].type;\n    if (listyp != 'folder') {\n        var cate = conts[i].category;\n        var fname = conts[i].name;\n        if (cate == 'video') {\n            var title = '📺' + conts[i].name;\n        } else if (cate == 'doc') {\n            var title = '📖' + conts[i].name;\n        } else if (cate == 'image') {\n            var title = '🖼' + conts[i].name;\n        } else if (cate == 'zip') {\n            var title = '📦' + conts[i].name;\n        } else {\n            var title = conts[i].name\n        }\n        d.push({\n            title: title,\n            url: $(conts[i].file_id).lazyRule((drivid, dongtai, cate, fname) => {\n                eval(dongtai);\n                return play\n            }, drivid, dongtai, cate, fname),\n            desc: formatDate(conts[i].updated_at) + '  ' + formatSize(conts[i].size),\n            col_type: 'text_1'\n\n        });\n        if (cate == 'video' || cate == 'audio') {\n            tuisong.push(\n                title.replace(/\\#/g, '_').replace(/\\$/g, '_') + '$' + cate + '|' + conts[i].file_id\n            );\n        }\n    } else {\n        d.push({\n            title: '📂' + conts[i].name,\n            url: $('hiker://empty' + conts[i].file_id).rule((drivid) => {\n                eval(JSON.parse(fetch('hiker://page/selfruleloop', {})).rule);\n            }, drivid),\n            col_type: 'flex_button'\n        });\n\n    } //end if\n}\n\neval(JSON.parse(fetch('hiker://page/pushcode', {})).rule);\n\nd.unshift({\n    title: getItem('hikertvboxset', ''),\n    url: 'hiker://empty',\n    col_type: 'flex_button'\n});\nd.unshift({\n    title: '设置IP地址',\n    url: \"input://\" + getItem('hikertvboxset', 'http://' + getIP() + ':9978') + \"////请输入tvbox推送IP地址，如http://\" + getIP() + \":9978.js:setItem('hikertvboxset',input);refreshPage()\",\n    col_type: 'flex_button'\n});\n//推送代码结束\nsetHomeResult({\n    data: d\n});","search_url":"","group":"2测试","searchFind":"","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"if (!getMyVar(\"aliaccessTk\")) {\n    let ntoken=[];\n    if (!fileExist(\"hiker://files/rules/icy/icy-ali-token.json\")) {\n        var reftoken = \"\";\n    } else {\n        var reftoken = JSON.parse(fetch('hiker://files/rules/icy/icy-ali-token.json', {}))[0].refresh_token;\n    }\n    var refresh = fetch('https://auth.aliyundrive.com/v2/account/token', {\n        headers: {\n            'Content-Type': 'application/json',\n            'User-Agent': PC_UA,\n            'Referer': 'https://www.aliyundrive.com/'\n        },\n        body: '{\"refresh_token\":\"' + reftoken + '\",\"grant_type\":\"refresh_token\"}',\n        method: 'POST'\n    });\n    //log(refresh);\n    if (!fileExist(\"hiker://files/rules/icy/icy-ali-token.json\") || refresh.length > 300) {\n        ntoken.push(JSON.parse(refresh));\n        writeFile(\"hiker://files/rules/icy/icy-ali-token.json\", JSON.stringify(ntoken));\n    }\n    \n    var refresh = fetch('hiker://files/rules/icy/icy-ali-token.json', {});\n    var accessTk = JSON.parse(refresh)[0].token_type + ' ' + JSON.parse(refresh)[0].access_token;\n    putMyVar(\"aliaccessTk\", accessTk);\n}\n\n\n","pages":"[{\"col_type\":\"movie_3\",\"name\":\"自己嵌套页面\",\"path\":\"selfruleloop\",\"rule\":\"var d = [];\\n\\nfunction formatDate(_date, _fmt) {\\n    let fmt = _fmt || \\\"yyyy-MM-dd HH:mm:ss\\\";\\n    const date = !isNaN(_date) ? new Date(_date * 1000) : new Date(_date);\\n    const o = {\\n        \\\"M+\\\": date.getMonth() + 1, //月份 \\n        \\\"d+\\\": date.getDate(), //日 \\n        \\\"h+\\\": date.getHours() % 12 == 0 ? 12 : date.getHours() % 12,\\n        \\\"H+\\\": date.getHours(), //小时 \\n        \\\"m+\\\": date.getMinutes(), //分 \\n        \\\"s+\\\": date.getSeconds(), //秒 \\n        \\\"q+\\\": Math.floor((date.getMonth() + 3) / 3), //季度 \\n        \\\"S\\\": date.getMilliseconds() //毫秒 \\n    };\\n    if (/(y+)/.test(fmt)) {\\n        fmt = fmt.replace(RegExp.$1, (date.getFullYear() + \\\"\\\").substr(4 - RegExp.$1.length));\\n    }\\n    for (let k in o) {\\n        if (new RegExp(\\\"(\\\" + k + \\\")\\\").test(fmt)) {\\n            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((\\\"00\\\" + o[k]).substr((\\\"\\\" + o[k]).length)));\\n        }\\n    }\\n    return fmt;\\n};\\n\\nfunction formatSize(size) {\\n    if (!size) {\\n        return '';\\n    }\\n    const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\\n    let i = 0;\\n    while (size >= 1024) {\\n        size /= 1024;\\n        i++;\\n    }\\n    size = i ? Number(size.toFixed(2)) : size;\\n    return `${size} ${units[i]}`;\\n}\\nvar tokenjson = JSON.parse(fetch('hiker://files/rules/icy/icy-ali-token.json', {}))[0];\\n\\nvar rescod = fetch('https://api.aliyundrive.com/adrive/v3/file/list', {\\n    headers: {\\n        'Content-Type': 'application/json',\\n        'authorization': getMyVar(\\\"aliaccessTk\\\", \\\"\\\")\\n    },\\n    body: '{\\\"drive_id\\\":\\\"' + drivid + '\\\",\\\"parent_file_id\\\":\\\"' + getResCode() + '\\\",\\\"limit\\\":100,\\\"image_thumbnail_process\\\":\\\"image/resize,w_160/format,jpeg\\\",\\\"image_url_process\\\":\\\"image\\\\/resize,w_1920/format,jpeg\\\",\\\"video_thumbnail_process\\\":\\\"video/snapshot,t_1000,f_jpg,ar_auto,w_300\\\",\\\"order_by\\\":\\\"name\\\",\\\"order_direction\\\":\\\"ASC\\\"}',\\n    method: 'POST'\\n});\\n//log(rescod);\\nvar conts = JSON.parse(rescod).items;\\nvar tuisong = [];\\nvar dongtai = JSON.parse(fetch('hiker://page/selflazyurl', {})).rule.toString();\\nfor (var i in conts) {\\n\\n    var listyp = conts[i].type;\\n    if (listyp != 'folder') {\\n        var cate = conts[i].category;\\n        var fname = conts[i].name;\\n        if (cate == 'video') {\\n            var title = '📺' + conts[i].name;\\n        } else if (cate == 'doc') {\\n            var title = '📖' + conts[i].name;\\n        } else if (cate == 'image') {\\n            var title = '🖼' + conts[i].name;\\n        } else if (cate == 'zip') {\\n            var title = '📦' + conts[i].name;\\n        } else {\\n            var title = conts[i].name\\n        }\\n        d.push({\\n            title: title,\\n            url: $(conts[i].file_id).lazyRule((drivid, dongtai, cate, fname) => {\\n                eval(dongtai);\\n                return play\\n            }, drivid, dongtai, cate, fname),\\n            desc: formatDate(conts[i].updated_at) + '  ' + formatSize(conts[i].size),\\n            col_type: 'text_1'\\n\\n        });\\n        if (cate == 'video' || cate == 'audio') {\\n            tuisong.push(\\n                title.replace(/\\\\#/g, '_').replace(/\\\\$/g, '_') + '$' + cate + '|' + conts[i].file_id\\n            );\\n        }\\n    } else {\\n        d.push({\\n            title: '📂' + conts[i].name,\\n            url: $('hiker://empty' + conts[i].file_id).rule((drivid) => {\\n                eval(JSON.parse(fetch('hiker://page/selfruleloop', {})).rule);\\n            }, drivid),\\n            col_type: 'flex_button'\\n        });\\n\\n    } //end if\\n\\n\\n}\\neval(JSON.parse(fetch('hiker://page/pushcode', {})).rule);\\n\\nsetHomeResult({\\n    data: d\\n});\"},{\"col_type\":\"movie_3\",\"name\":\"自己动态解析\",\"path\":\"selflazyurl\",\"rule\":\"function accessTk() {\\n    let ntoken = [];\\n    var reftoken = JSON.parse(fetch('hiker://files/rules/icy/icy-ali-token.json', {}))[0].refresh_token;\\n    let accessTk = \\\"\\\";\\n    let refresh = fetch('https://auth.aliyundrive.com/v2/account/token', {\\n        headers: {\\n            'Content-Type': 'application/json',\\n            'Referer': 'https://www.aliyundrive.com/'\\n        },\\n        body: '{\\\"refresh_token\\\":\\\"' + reftoken + '\\\",\\\"grant_type\\\":\\\"refresh_token\\\"}',\\n        method: 'POST'\\n    });\\n    ntoken.push(JSON.parse(refresh));\\n    if (!fileExist(\\\"hiker://files/rules/icy/icy-ali-token.json\\\") || refresh.length > 300) {\\n        writeFile(\\\"hiker://files/rules/icy/icy-ali-token.json\\\", JSON.stringify(ntoken));\\n    }\\n    //log(JSON.parse(refresh));    \\n    accessTk = JSON.parse(refresh).token_type + ' ' + JSON.parse(refresh).access_token;\\n    putMyVar(\\\"aliaccessTk\\\", accessTk);\\n    return accessTk\\n}\\nif (cate == 'video' || cate == 'audio') {\\n    //处理视频  \\n    var dfid = input;\\n    if (cate == 'video') {\\n        var json = fetch('https://api.aliyundrive.com/v2/file/get_video_preview_play_info', {\\n            headers: {\\n                'Content-Type': 'application/json',\\n                'Authorization': accessTk()\\n            },\\n            body: '{\\\"drive_id\\\":\\\"' + drivid + '\\\",\\\"category\\\":\\\"live_transcoding\\\",\\\"file_id\\\":\\\"' + input + '\\\",\\\"template_id\\\":\\\"\\\"}',\\n            method: 'POST'\\n        });\\n        //log(json);\\n\\n        var dfid = JSON.parse(json).file_id;\\n    }\\n    if (cate == 'video') {\\n        var body = '{\\\"expire_sec\\\":115200,\\\"file_id\\\":\\\"' + dfid + '\\\",\\\"drive_id\\\":\\\"' + drivid + '\\\"}';\\n\\n    } else {\\n        var body = '{\\\"file_id\\\":\\\"' + dfid + '\\\",\\\"get_audio_play_info\\\":true,\\\"drive_id\\\":\\\"' + drivid + '\\\"}';\\n    }\\n    var djson = fetch('https://api.aliyundrive.com/v2/file/get_download_url', {\\n        headers: {\\n            'Content-Type': 'application/json',\\n            'Authorization': accessTk()\\n        },\\n        body: body,\\n        method: 'POST'\\n    });\\n    var link = JSON.parse(djson).url;\\n\\n    var play = link + ';{Referer@https://www.aliyundrive.com/}';\\n\\n} else if (cate == 'image') {\\n    //处理文档\\n    var json = fetch('https://api.aliyundrive.com/v2/file/get_download_url', {\\n        headers: {\\n            'Content-Type': 'application/json',\\n            'Authorization': accessTk()\\n        },\\n        body: '{\\\"drive_id\\\":\\\"' + drivid + '\\\",\\\"expire_sec\\\": 115200,\\\"file_id\\\":\\\"' + input + '\\\"}',\\n        method: 'POST'\\n    });\\n\\n    //log(json);\\n    var loclink = JSON.parse(json).url;\\n\\n    //log(loclink);\\n    if (cate == 'image') {\\n        var play = 'pics://' + loclink + '@Referer=https://www.aliyundrive.com/';\\n    } else {\\n        var play = loclink + ';{Referer@https://www.aliyundrive.com/}';\\n    }\\n} else {\\n    var play = 'toast://该格式暂未支持，目前只支持查看视频和图片。'\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"推送代码\",\"path\":\"pushcode\",\"rule\":\"js:\\n//推送代码\\nlet push = JSON.stringify({\\n    //\\\"headers\\\":JSON.stringify({\\\"\\\":\\\"\\\"}),\\n    \\\"url\\\": tuisong.join('#'),\\n    \\\"default_drive_id\\\": drivid,\\n    \\\"refresh_token\\\": tokenjson.refresh_token\\n}).replace(/\\\\&/g, '＆＆');\\n//log(push);\\nlet tvip = getItem('hikertvboxset', '');\\n//log(tuisong.length);\\nif(tuisong.length>0){\\nd.unshift({\\n    title: \\\"推送当前页音视频到TVBox\\\",\\n    url: $(push).lazyRule((tvip) => {\\n        if (!tvip.includes(':997')) {\\n            return 'toast://IP为空或不正确，请先设置。'\\n        };\\n        var state = request(tvip + '/action', {\\n            headers: {\\n                'Content-Type': 'application/x-www-form-urlencoded',\\n                //'X-Requested-With': 'XMLHttpRequest',\\n                'Referer': tvip\\n            },\\n            timeout: 2000,\\n            body: 'do=push&url=' + input,\\n            method: 'POST'\\n        });\\n        log(state);\\n        if (state == 'ok') {\\n            return 'toast://推送成功，如果tvbox显示“没找到数据”可能是当前的jar不支持。';\\n        } else {\\n            return 'toast://推送失败'\\n        }\\n    }, tvip),\\n    col_type: \\\"scroll_button\\\"\\n});\\n}\\n//\"}]","icon":"https://gw.alicdn.com/imgextra/i3/O1CN01aj9rdD1GS0E8io11t_!!6000000000620-73-tps-16-16.ico","proxy":""}